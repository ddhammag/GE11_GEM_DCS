V 14
1
LANG:1 0 
PANEL,-1 -1 721 849 N "_3DFace" 1
"$sDpName"
"  //
  // --- Animate Status alarms and Alarm Ack required and Alarms masked
  //
  // --- Animate trending and custom trending.
  //
  // --- Check if device not exists -> panel violet
  //
  // --- Check if model is not found -> panel violet
  //

main()
{
  int iDriver, iNumberSlots;
  string sSymbolicName, sActiveTab, sLogicalName;
  dyn_string exceptionInfo;
  dyn_dyn_string ddsModelProperties;
  
  bCONNECTED = TRUE;


  // --- Disconnecting trend tab ON WORKS
  setValue(\"TAB_CRATE\", \"namedRegisterEnabled\", \"trend\", FALSE);
  
  
  // --- Get Dp name and alias
    // If dp doesn't exist, maybe it is an alias
  if(!dpExists($sDpName))
  {
    dsCRATEOBJECT[fwDevice_DP_NAME]  = dpAliasToName($sDpName);
    dsCRATEOBJECT[fwDevice_DP_ALIAS] = $sDpName;
	DebugN(\"fffff\");
  }
  else
  {
    dsCRATEOBJECT[fwDevice_DP_NAME]  = $sDpName;
    dsCRATEOBJECT[fwDevice_DP_ALIAS] = dpGetAlias(dsCRATEOBJECT[fwDevice_DP_NAME] + \".\");
dpGet(dsCRATEOBJECT[fwDevice_DP_NAME] + \".Information.ModelName:_distrib.._driver\", iDriver);	
	DebugN(iDriver);
  }

  
  // --- If doesn't exist now the parameter is wrong
  if(!dpExists(dsCRATEOBJECT[fwDevice_DP_NAME]))
  {
    fwException_raise(exceptionInfo,
                      \"WARNING\",
                      \"The device \" + $sDpName + \" does not exist.\",
                      \"\");
    changeConnectionStatus(FALSE);
    fwExceptionHandling_display(exceptionInfo);
    return;
  }


  sActiveTab = TAB_CRATE.namedActiveRegister();
  switch(sActiveTab)
  {
     case \"info\":
      changeVisibilityShape(\"INFORMATION\", TRUE);
      changeVisibilityShape(\"STATUS\",      FALSE);
      changeVisibilityShape(\"TRENDING\",    FALSE);
      break;

    case \"state\":
      changeVisibilityShape(\"INFORMATION\", FALSE);
      changeVisibilityShape(\"STATUS\",      TRUE);
      changeVisibilityShape(\"TRENDING\",    FALSE);
      break;

    case \"trend\":
      changeVisibilityShape(\"INFORMATION\", FALSE);
      changeVisibilityShape(\"STATUS\",      FALSE);
      changeVisibilityShape(\"TRENDING\",    TRUE);
      break;

    default:
      DebugTN(\"fwCaenCrateSY1527Operational.pnl -> Initialization -> Error, unknown tab: \" + sActiveTab);
      return;
      break;
  }//switch(sActiveTab)


  sActiveTab = TAB_COMMANDS.namedActiveRegister();
  switch(sActiveTab)
  {
     case \"general\":
      changeVisibilityShape(\"COMMAND_CRATE\",   TRUE);
      changeVisibilityShape(\"COMMAND_ALARMS\",  FALSE);
      changeVisibilityShape(\"COMMAND_MASSIVE\", FALSE);
      break;

    case \"alarms\":
      changeVisibilityShape(\"COMMAND_CRATE\",   FALSE);
      changeVisibilityShape(\"COMMAND_ALARMS\",  TRUE);
      changeVisibilityShape(\"COMMAND_MASSIVE\", FALSE);
      break;

    case \"massive\":
      changeVisibilityShape(\"COMMAND_CRATE\",   FALSE);
      changeVisibilityShape(\"COMMAND_ALARMS\",  FALSE);
      changeVisibilityShape(\"COMMAND_MASSIVE\", TRUE);
      break;

    default:
      DebugTN(\"fwCaenCrateSY1527Operational.pnl -> Initialization -> Error, unknown tab: \" + sActiveTab);
      return;
      break;
  }//switch(sActiveTab)


  // --- Check elements available in the device (Device Model)
  fwDevice_getModel(dsCRATEOBJECT, dsCRATEOBJECT[fwDevice_MODEL], exceptionInfo);
  if (dynlen(exceptionInfo)>0)
  {
    fwException_raise(exceptionInfo,
                      \"WARNING\",
                      \"The device \" + $sDpName + \" have not device model definition.\",
                      \"\");
    fwExceptionHandling_display(exceptionInfo);
    return;
  }


  // --- Get driver manager and symbolic name from HW
  if (dpGet(dsCRATEOBJECT[fwDevice_DP_NAME] + \".Information.ModelName:_distrib.._driver\", iDriver,
            dsCRATEOBJECT[fwDevice_DP_NAME] + \".Information.SymbolicName\",                sSymbolicName)!= 0)
  {
    fwException_raise(exceptionInfo,
                      \"WARNING\",
                      \"The device \" + $sDpName + \" have not appropiate driver number or crate symbolic name.\",
                      \"\"); 
    fwExceptionHandling_display(exceptionInfo);
    return;
  }


  // --- If Alias is empty -> default message
  if( dsCRATEOBJECT[fwDevice_DP_ALIAS] == \"\" )
    sLogicalName = \"Not available\";
  else
    sLogicalName = dsCRATEOBJECT[fwDevice_DP_ALIAS];

  // --- If Symbolic name is empty -> default message
  if( sSymbolicName == \"\" )
    sSymbolicName = \"Name not available\";


  // --- Animating subtitles
  if (sLogicalName != \"Not available\")
  {
    if (sSymbolicName != \"Name not available\")
    {
      setMultiValue(\"PRIMITIVE_TEXT_TITLE_FIRST_FIELD\",  \"text\", \"Main name (1/3): \"     + dsCRATEOBJECT[fwDevice_DP_NAME],
                    \"PRIMITIVE_TEXT_TITLE_SECOND_FIELD\", \"text\", \"Logical name (2/3): \"  + sLogicalName,
                    \"PRIMITIVE_TEXT_TITLE_THIRD_FIELD\",  \"text\", \"Symbolic name (3/3): \" + sSymbolicName);
    }
    else
      setMultiValue(\"PRIMITIVE_TEXT_TITLE_FIRST_FIELD\",  \"text\", \"Main name (1/2): \"     + dsCRATEOBJECT[fwDevice_DP_NAME],
                    \"PRIMITIVE_TEXT_TITLE_SECOND_FIELD\", \"text\", \"Logical name (2/2): \"  + sLogicalName,
                    \"PRIMITIVE_TEXT_TITLE_THIRD_FIELD\",  \"text\", \"\");
  }
  else
    if (sSymbolicName != \"Name not available\")
    {
      setMultiValue(\"PRIMITIVE_TEXT_TITLE_FIRST_FIELD\",  \"text\", \"Main name (1/2): \"     + dsCRATEOBJECT[fwDevice_DP_NAME],
                    \"PRIMITIVE_TEXT_TITLE_SECOND_FIELD\", \"text\", \"Symbolic name (2/2): \" + sSymbolicName,
                    \"PRIMITIVE_TEXT_TITLE_THIRD_FIELD\",  \"text\", \"\");
    }
    else
      setMultiValue(\"PRIMITIVE_TEXT_TITLE_FIRST_FIELD\",  \"text\", \"Main name: \" + dsCRATEOBJECT[fwDevice_DP_NAME],
                    \"PRIMITIVE_TEXT_TITLE_SECOND_FIELD\", \"text\", \"\",
                    \"PRIMITIVE_TEXT_TITLE_THIRD_FIELD\",  \"text\", \"\");


  // --- Animating crate description and rectangle crate model image
  string sCrateImage;
  if ( isfile(getPath(ICONS_REL_PATH, \"fwCaen/fwCaen_\" + dsCRATEOBJECT[fwDevice_MODEL] + \".png\", SEARCH_PATH_LEN)) )
    sCrateImage = \"[pattern,[fit,any,\" + getPath(ICONS_REL_PATH, \"fwCaen/fwCaen_\" + dsCRATEOBJECT[fwDevice_MODEL] + \".png\", SEARCH_PATH_LEN) + \"]]\";
  else
    sCrateImage = \"[solid]\";

  setMultiValue(\"PRIMITIVE_TEXT_DESCRIP_HW\",       \"text\", dsCRATEOBJECT[fwDevice_DP_NAME],
                \"PRIMITIVE_TEXT_DESCRIP_LOGICAL\",  \"text\", sLogicalName,
                \"PRIMITIVE_TEXT_DESCRIP_SYMBOLIC\", \"text\", sSymbolicName,
                \"PRIMITIVE_TEXT_DESCRIP_MODEL\",    \"text\", dsCRATEOBJECT[fwDevice_MODEL],
                \"RECTANGLE_IMAGE\",                 \"fill\", sCrateImage);


  // --- Get model properties and analize if a DPE is available in the model
  dsCRATEOBJECT[fwDevice_DP_TYPE] = dpTypeName(dsCRATEOBJECT[fwDevice_DP_NAME]);
  fwDevice_getConfigElements(dsCRATEOBJECT[fwDevice_DP_TYPE],
                             fwDevice_ALL,
                             ddsELEMENTS,
                             exceptionInfo,
                             dsCRATEOBJECT[fwDevice_MODEL],
                             dsCRATEOBJECT[fwDevice_DP_NAME]);


  // --- Check items to enable crate information
  dyn_string dsCrateInfoItems, dsCrateInfo;
  dsCrateInfo = makeDynString(\".Information.SwRelease\",
                              \".Information.Sessions\",
                              \".Communication.IPAddr\",
                              \".Communication.IPNetMsk\",
                              \".Communication.IpGw\",
                              \".Communication.RS232Par\",
                              \".Communication.CnetCrNum\");
  CheckItems(dsCrateInfo, ddsELEMENTS[fwDevice_ELEMENTS_INDEX], dsCrateInfoItems);
  AnimateItems(\"AnimateCrateInfo\", TRUE, dsCRATEOBJECT[fwDevice_DP_NAME], dsCrateInfoItems, TRUE);


  // --- Check items to enable and animate CPU load
  dyn_string dsCpuLoadItems, dsCpuAllItems;
  dsCpuAllItems = makeDynString(\".Information.Debug.CpuLoad.1min\",
                                \".Information.Debug.CpuLoad.5min\",
                                \".Information.Debug.CpuLoad.15min\");
  CheckItems(dsCpuAllItems, ddsELEMENTS[fwDevice_ELEMENTS_INDEX], dsCpuLoadItems);
  if ( dynlen(dsCpuLoadItems) == 0 )
  {
    setMultiValue(\"PRIMITIVE_TEXT_RESOURCES_CPU_1\",        \"text\",    \"xx%\",
                  \"PRIMITIVE_TEXT_RESOURCES_CPU_1\",        \"foreCol\", \"grey\",
                  \"PRIMITIVE_TEXT_RESOURCES_CPU_LABEL_1\",  \"foreCol\", \"grey\",
                  \"PRIMITIVE_TEXT_RESOURCES_CPU_5\",        \"text\",    \"xx%\",
                  \"PRIMITIVE_TEXT_RESOURCES_CPU_5\",        \"foreCol\", \"grey\",
                  \"PRIMITIVE_TEXT_RESOURCES_CPU_LABEL_5\",  \"foreCol\", \"grey\",
                  \"PRIMITIVE_TEXT_RESOURCES_CPU_15\",       \"text\",    \"xx%\",
                  \"PRIMITIVE_TEXT_RESOURCES_CPU_15\",       \"foreCol\", \"grey\",
                  \"PRIMITIVE_TEXT_RESOURCES_CPU_LABEL_15\", \"foreCol\", \"grey\",
                  \"PROGRESS_BAR_RESOURCES_CPU_1\",          \"color\",   \"grey\",
                  \"PROGRESS_BAR_RESOURCES_CPU_5\",          \"color\",   \"grey\",
                  \"PROGRESS_BAR_RESOURCES_CPU_15\",         \"color\",   \"grey\");
  }
  else
    AnimateItems(\"AnimateCpu\", TRUE, dsCRATEOBJECT[fwDevice_DP_NAME], dsCpuLoadItems, TRUE);


  // --- Check items to enable and animate memory load
  dyn_string dsMemItems, dsMemAllItems;
  dsMemAllItems = makeDynString(\".Information.Debug.MemoryStatus.Total\",
                                \".Information.Debug.MemoryStatus.Free\",
                                \".Information.Debug.MemoryStatus.Used\",
                                \".Information.Debug.MemoryStatus.Buffers\");
  CheckItems(dsMemAllItems, ddsELEMENTS[fwDevice_ELEMENTS_INDEX], dsMemItems);
  if ( dynlen(dsCpuLoadItems) == 0 )
  {
    setMultiValue(\"PRIMITIVE_TEXT_RESOURCES_MEM_TOTAL\",  \"text\",    \"Total: xxx\",
                  \"PRIMITIVE_TEXT_RESOURCES_MEM_FREE\",   \"text\",    \"Free: xxx\",
                  \"PRIMITIVE_TEXT_RESOURCES_MEM_FREE\",   \"foreCol\", \"grey\",
                  \"PRIMITIVE_TEXT_RESOURCES_MEM_BUFFER\", \"text\",    \"Buffers: xxx\",
                  \"PRIMITIVE_TEXT_RESOURCES_MEM_BUFFER\", \"foreCol\", \"lightgrey\",
                  \"PRIMITIVE_TEXT_RESOURCES_MEM_USED\",   \"text\",    \"Used: xxx\",
                  \"PRIMITIVE_TEXT_RESOURCES_MEM_USED\",   \"foreCol\", \"darkgrey\",
                  \"PROGRESS_BAR_RESOURCES_MEM_FREE\",     \"backCol\", \"grey\",
                  \"PROGRESS_BAR_RESOURCES_MEM_USED\",     \"backCol\", \"darkgrey\",
                  \"PROGRESS_BAR_RESOURCES_MEM_BUFFER\",   \"backCol\", \"lightgrey\");
  }
  else
    AnimateItems(\"AnimateMem\", TRUE, dsCRATEOBJECT[fwDevice_DP_NAME], dsMemItems, TRUE);


  // --- Check items to enable and animate fan status and speeds
  dyn_string dsFanItems, dsFanAllItems;
  dsFanAllItems = makeDynString(\".FanStatus.StatFan1\",
                                \".FanStatus.StatFan2\",
                                \".FanStatus.StatFan3\",
                                \".FanStatus.StatFan4\",
                                \".FanStatus.StatFan5\",
                                \".FanStatus.StatFan6\",
                                \".FanStatus.SpeedFan1\",
                                \".FanStatus.SpeedFan2\",
                                \".FanStatus.SpeedFan3\",
                                \".FanStatus.SpeedFan4\",
                                \".FanStatus.SpeedFan5\",
                                \".FanStatus.SpeedFan6\",
                                \".FanStatus.FanSpeed\",
                                \".PWstatus.PwFanStatus.PwStatFan1\",
                                \".PWstatus.PwFanStatus.PwStatFan2\",
                                \".PWstatus.PwFanStatus.PwStatFan3\",
                                \".PWstatus.PwFanStatus.PwSpeedFan1\",
                                \".PWstatus.PwFanStatus.PwSpeedFan2\",
                                \".PWstatus.PwFanStatus.PwSpeedFan3\");
  CheckItems(dsFanAllItems, ddsELEMENTS[fwDevice_ELEMENTS_INDEX], dsFanItems);
  AnimateItems(\"AnimateFan\", TRUE, dsCRATEOBJECT[fwDevice_DP_NAME], dsFanItems, TRUE);


  // --- Check items to enable and animate crate statuses
  dyn_string dsCrateState, dsCrateAllState;
  dsCrateAllState = makeDynString(\".Communication.ConnStatus\",
                                  \".FrontPanOutP.CHON\",
                                  \".FrontPanInP.Vsel\",
                                  \".FrontPanInP.Isel\",
                                  \".Information.Debug.CmdQueueStatus\");
  CheckItems(dsCrateAllState, ddsELEMENTS[fwDevice_ELEMENTS_INDEX], dsCrateState);
  AnimateItems(\"AnimateCrateState\", TRUE, dsCRATEOBJECT[fwDevice_DP_NAME], dsCrateState, TRUE);


  // --- Check items to enable and animate power supply voltages and currents
  dyn_string dsPSMain, dsPSMainAll;
  dsPSMainAll = makeDynString(\".PWstatus.PwVoltages.Channel_DD\",
                              \".PWstatus.PwCurrents.Channel_DD\",
                              \".PWstatus.PwVoltages.Channel_CC_Neg\",
                              \".PWstatus.PwCurrents.Channel_CC_Neg\",
                              \".PWstatus.PwVoltages.Channel_CC_Pos\",
                              \".PWstatus.PwCurrents.Channel_CC_Pos\",
                              \".PWstatus.PwVoltages.Channel_PWR\",
                              \".PWstatus.PwCurrents.Channel_PWR\");
  CheckItems(dsPSMainAll, ddsELEMENTS[fwDevice_ELEMENTS_INDEX], dsPSMain);
  if ( dynlen(dsPSMain) == 0 )
    setValue(\"TABLE_PS_MAIN_POWER\", \"backCol\", \"_3DFace\");
  else
    AnimateItems(\"AnimatePSMain\", TRUE, dsCRATEOBJECT[fwDevice_DP_NAME], dsPSMain, TRUE);


  // --- Check items to enable and animate FAN and CPU channels
  dyn_string dsPSSub, dsPSSubAll;
  dsPSSubAll = makeDynString(\".PWstatus.PwVoltages.Channel_FAN\",
                             \".PWstatus.PwVoltages.Channel_CPU\");
  CheckItems(dsPSSubAll, ddsELEMENTS[fwDevice_ELEMENTS_INDEX], dsPSSub);
  if ( dynlen(dsPSSub) == 0 )
    setValue(\"TABLE_PS_SUB\", \"backCol\", \"_3DFace\");
  else
    AnimateItems(\"AnimatePSSub\", TRUE, dsCRATEOBJECT[fwDevice_DP_NAME], dsPSSub, TRUE);


  // --- Check items to enable and animate boosters on power supply
  dyn_string dsPSBooster, dsPSBoosterAll;
  dsPSBoosterAll = makeDynString(\".PWstatus.Add1\",
                                 \".PWstatus.Add2\",
                                 \".PWstatus.Add3\",
                                 \".PWstatus.PwCurrents.Channel_BOOSTER1\",
                                 \".PWstatus.PwCurrents.Channel_BOOSTER2\",
                                 \".PWstatus.PwCurrents.Channel_BOOSTER3\");
  CheckItems(dsPSBoosterAll, ddsELEMENTS[fwDevice_ELEMENTS_INDEX], dsPSBooster, FALSE);
  if ( dynlen(dsPSBooster) == 0 )
    setValue(\"TABLE_PS_BOOSTERS\", \"backCol\", \"_3DFace\");
  else
    AnimateItems(\"AnimatePSBooster\", TRUE, dsCRATEOBJECT[fwDevice_DP_NAME], dsPSBooster, TRUE);


  // --- Get number of slots and animate table
  fwDevice_getModelProperties(dsCRATEOBJECT[fwDevice_DP_NAME], ddsModelProperties, exceptionInfo);
  if (dynlen(exceptionInfo)>0)
  {
    DebugTN(\"fwCaenCrateSY1527Operation.pnl -> main() -> Error getting crate model properties on crate: \" + sCrateDpName);
    return;
  }
  iNumberSlots = ddsModelProperties[fwDevice_MODEL_SLOTS][1];
  AnimateTableBoard(iNumberSlots, dsCRATEOBJECT[fwDevice_DP_NAME]);

  // --- Check items to enable and animate crate staus values
  dyn_string dsTableState, dsTableAllState;
  dsTableAllState = makeDynString(\".FrontPanInP.Kill\",
                                  \".FrontPanInP.Interlock\",
                                  \".FrontPanInP.RemoteEnable\",
                                  \".FrontPanInP.LocalEnable\",
                                  \".FrontPanInP.TTL/NIM\",
                                  \".FrontPanOutP.OVC\",
                                  \".FrontPanOutP.UNV\",
                                  \".FrontPanOutP.OVV\",
                                  \".FrontPanOutP.FanFailure\",
                                  \".PWstatus.ACstatus\",
                                  \".PWstatus.PrimaryPS\");
  CheckItems(dsTableAllState, ddsELEMENTS[fwDevice_ELEMENTS_INDEX], dsTableState);
  AnimateItems(\"AnimateTableState\", TRUE, dsCRATEOBJECT[fwDevice_DP_NAME], dsTableState, FALSE);


  // --- Check items to enable crate commands
  dyn_string dsCommands, dsCommandsAll;
  dsCommandsAll = makeDynString(\".Commands.ClearAlarm\",
                                \".Commands.Kill\",
                                \".Commands.Format\",
                                \".Commands.SetFanSpeed\");
  CheckItems(dsCommandsAll, ddsELEMENTS[fwDevice_ELEMENTS_INDEX], dsCommands);
  AnimateCommands(dsCommands);
  
  
  // --- dpConnect SIM/OPC connection
  string sSystem;
  sSystem = dpSubStr(dsCRATEOBJECT[fwDevice_DP_NAME], DPSUB_SYS);
  if( fwInstallationRedu_dpConnect(\"OpcStateCB\", 
                                   TRUE,
                                   makeDynString(sSystem + \"_Connections.Driver.ManNums\",
                                                 sSystem + \"_Driver\" + iDriver + \".DT\",
                                                 sSystem + \"_CAENOPCServer.Connected\",
                                                 dsCRATEOBJECT[fwDevice_DP_NAME] + \".Communication.ConnStatus\")) != 0 )
  {
    fwException_raise(exceptionInfo,
                      \"WARNING\",
                      \"The device \" + $sDpName + \": can not connect OPC client driver state.\",
                      \"\");
    fwExceptionHandling_display(exceptionInfo);
    return;
  }

}//main()




AnimateTableBoard(int iSlots, string sCrateDpName)
{
//   DebugTN(\"AnimateTableBoard -> iSlots = \" + iSlots + \", sCrateDpName = \" + sCrateDpName);

  int iLoop, iPos;
  dyn_string dsBoards, dsValuesConnect, dsAlarmsConnect, dsAlarmsDpes, exceptionInfo;
  dyn_anytype daBoard;
  dyn_dyn_anytype ddaLine;

  // --- Get all boards
  fwDevice_getChildren(sCrateDpName, fwDevice_HARDWARE, dsBoards, exceptionInfo);
  if (dynlen(exceptionInfo)>0)
  {
    DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateTableBoard() -> Error getting boards from crate \" + sCrateDpName);
    return;
  }

  // --- Get boards info + dpe to dpConnect
  for (iLoop = 1 ; iLoop <= dynlen(dsBoards) ; iLoop++)
  {
    dynClear(daBoard);
    GetBoardInfo(dsBoards[iLoop], daBoard);

    dynAppend(ddaLine[BOARD_DP],           daBoard[BOARD_DP]);
    dynAppend(ddaLine[BOARD_POSITION],     daBoard[BOARD_POSITION]);
    dynAppend(ddaLine[BOARD_WIDE],         daBoard[BOARD_WIDE]);
    dynAppend(ddaLine[BOARD_NAME],         daBoard[BOARD_NAME]);
    dynAppend(ddaLine[BOARD_MODEL],        daBoard[BOARD_MODEL]);
    dynAppend(ddaLine[BOARD_N_CHANNELS],   daBoard[BOARD_N_CHANNELS]);
    dynAppend(ddaLine[BOARD_DP_TEMP],      daBoard[BOARD_DP_TEMP]);
    dynAppend(ddaLine[BOARD_DP_HV_MAX],    daBoard[BOARD_DP_HV_MAX]);
    dynAppend(ddaLine[BOARD_DP_SUM_ALARM], daBoard[BOARD_DP_SUM_ALARM]);
  }//for(get info boards)


  for (iLoop = 0 ; iLoop < iSlots ; iLoop++)
  {
    if( dynlen(ddaLine) > 0 )
      iPos = dynContains(ddaLine[BOARD_POSITION], (string)(iLoop) );
    else
      iPos = -1;
    
    if (iPos > 0)
    {
      setValue(\"TABLE_BOARD\", \"appendLine\", \"slot\",   ddaLine[BOARD_POSITION]  [iPos],
                                            \"name\",   ddaLine[BOARD_NAME]      [iPos],
                                            \"model\",  ddaLine[BOARD_MODEL]     [iPos],
                                            \"number\", ddaLine[BOARD_N_CHANNELS][iPos],
                                            \"dp\",     ddaLine[BOARD_DP]        [iPos]);

      if (ddaLine[BOARD_DP_TEMP][iPos] != \"\")
        dynAppend(dsValuesConnect, ddaLine[BOARD_DP_TEMP][iPos]);

      if (ddaLine[BOARD_DP_HV_MAX][iPos] != \"\")
        dynAppend(dsValuesConnect, ddaLine[BOARD_DP_HV_MAX][iPos]);

      if (ddaLine[BOARD_DP_SUM_ALARM][iPos] != \"\")
        dynAppend(dsAlarmsConnect, ddaLine[BOARD_DP_SUM_ALARM][iPos]);

      if( ddaLine[BOARD_WIDE][iPos] > 1 )
      {
        int iLoopWide;
        for( iLoopWide = 1 ; iLoopWide < ddaLine[BOARD_WIDE][iPos] ; iLoopWide++ )
        {
          setValue(\"TABLE_BOARD\", \"appendLine\", \"slot\", ((int)ddaLine[BOARD_POSITION][iPos]) + iLoopWide,
                                                \"name\", \" - board in slot \" + ddaLine[BOARD_POSITION][iPos] + \" -\");
          setMultiValue(\"TABLE_BOARD\", \"cellBackColRC\", (iLoop + iLoopWide), \"model\",       \"_3DFace\",
                        \"TABLE_BOARD\", \"cellBackColRC\", (iLoop + iLoopWide), \"number\",      \"_3DFace\",
                        \"TABLE_BOARD\", \"cellBackColRC\", (iLoop + iLoopWide), \"temperature\", \"_3DFace\",
                        \"TABLE_BOARD\", \"cellBackColRC\", (iLoop + iLoopWide), \"hmax\",        \"_3DFace\",
                        \"TABLE_BOARD\", \"cellBackColRC\", (iLoop + iLoopWide), \"alarms\",      \"_3DFace\");
        }
        iLoop = iLoop + iLoopWide - 1;
      }
    }
    else
    {
      setValue     (\"TABLE_BOARD\", \"appendLine\",    \"slot\", iLoop );
      setMultiValue(\"TABLE_BOARD\", \"cellBackColRC\", iLoop,  \"slot\",        \"_3DFace\",
                    \"TABLE_BOARD\", \"cellBackColRC\", iLoop,  \"name\",        \"_3DFace\",
                    \"TABLE_BOARD\", \"cellBackColRC\", iLoop,  \"model\",       \"_3DFace\",
                    \"TABLE_BOARD\", \"cellBackColRC\", iLoop,  \"number\",      \"_3DFace\",
                    \"TABLE_BOARD\", \"cellBackColRC\", iLoop,  \"temperature\", \"_3DFace\",
                    \"TABLE_BOARD\", \"cellBackColRC\", iLoop,  \"hmax\",        \"_3DFace\",
                    \"TABLE_BOARD\", \"cellBackColRC\", iLoop,  \"alarms\",      \"_3DFace\");
    }//else(iPos)

  }//for(populateTable)


  // --- Connecting values
  if( dynlen(dsValuesConnect) > 0 )
  {
    if ( dpConnect(\"AnimateTableBoardVarCB\", TRUE, dsValuesConnect) != 0 )
    {
      fwException_raise(exceptionInfo,
                        \"WARNING\",
                        \"Cannot animate panel with function: AnimateTableVarCB \\n dpConnect failure.\",
                        \"\"); 
      fwExceptionHandling_display(exceptionInfo);
      return;
    }


    // --- Connecting alarms
    for( iLoop = 1 ; iLoop <= dynlen(dsAlarmsConnect) ; iLoop++ )
    {
      if( mpHasDpeConfig(dsAlarmsConnect[iLoop], \"_alert_hdl\") )
      {
        dynAppend(dsAlarmsDpes, dsAlarmsConnect[iLoop] + \":_alert_hdl.._act_state_color\");
      }
    }

    delay(0,50); // --- Wait shape is filled by first time.

    if( dynlen(dsAlarmsDpes) > 0 )
      if( dpConnect(\"AnimateTableBoardVarAlarmCB\", TRUE, dsAlarmsDpes) != 0 )
      {
        fwException_raise(exceptionInfo,
                          \"WARNING\",
                          \"Cannot animate panel with function: AnimateTableVarAlarmCB \\n dpConnect failure.\",
                          \"\");
        fwExceptionHandling_display(exceptionInfo);
        return;
      }
  }
}//AnimateTableBoard()
  
  
  
  
  
  
GetBoardInfo(string sBoardDp, dyn_anytype &daBoard)
{
//   DebugTN(\"GetBoardInfo -> sBoardDp = \" + sBoardDp);

  int iLoop, iPos, iNumberSlots;
  string sName, sModel;
  dyn_string exceptionInfo;
  dyn_dyn_string ddsModelProperties, ddsModelElements;
  
  dynClear(daBoard);

  daBoard = makeDynAnytype(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\");
  daBoard[BOARD_DP] = sBoardDp;
   
  fwDevice_getPosition(daBoard[1], sName, iPos, exceptionInfo);
  if (dynlen(exceptionInfo)>0)
  {
    DebugTN(\"fwCaenCrateSY1527Operation.pnl -> GetBoardInfo() -> Error board info: \" + exceptionInfo);
    return;
  }
  daBoard[BOARD_POSITION] = iPos;
  daBoard[BOARD_NAME] = sName;
  
  fwDevice_getModel(makeDynString(sBoardDp), sModel, exceptionInfo);
  if (dynlen(exceptionInfo)>0)
  {
    DebugTN(\"fwCaenCrateSY1527Operation.pnl -> GetBoardInfo() -> Error getting board model: \" + exceptionInfo);
    return;
  }
  daBoard[BOARD_MODEL] = sModel;
  
  fwDevice_getModelProperties(sBoardDp, ddsModelProperties, exceptionInfo);
  iNumberSlots = ddsModelProperties[fwDevice_MODEL_SLOTS][1];
  daBoard[BOARD_N_CHANNELS] = iNumberSlots; 
  daBoard[BOARD_WIDE] = ddsModelProperties[fwDevice_MODEL_WIDTH][1];
  
  // --- Get model properties and analize if a DPE is available in the model
  // --- Board temperature, HVmax and summary alarms.
  fwDevice_getConfigElements(dpTypeName(sBoardDp), fwDevice_ALL, ddsModelElements, 
                             exceptionInfo, daBoard[BOARD_MODEL], sBoardDp);


  // --- Check items to enable board information
  dyn_string dsBoardInfoItems, dsBoardInfo;
  dsBoardInfo = makeDynString(\".HVMax.HVMax\",
                              \".Temp.Temp\");
  CheckItems(dsBoardInfo, ddsModelElements[fwDevice_ELEMENTS_INDEX], dsBoardInfoItems);
  if ( dynlen(dsBoardInfoItems) >0 )
  {
    for (iLoop = 1 ; iLoop <= dynlen(dsBoardInfoItems) ; iLoop++)
    {
      switch (dsBoardInfoItems[iLoop])
      {
        case \".HVMax.HVMax\":
          daBoard[BOARD_DP_HV_MAX] = sBoardDp + dsBoardInfoItems[iLoop];
          break;
          
        case \".Temp.Temp\":
          daBoard[BOARD_DP_TEMP] = sBoardDp + dsBoardInfoItems[iLoop];          
          break;
          
        default:
          break;
          
      }//switch
    }//for(items)
  }//if(items>0)

  daBoard[BOARD_DP_SUM_ALARM] = sBoardDp + \".\";
  
}





AnimateTableBoardVarCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimateTableBoardVarCB -> dsDpes = \",  dsDpes);
//   DebugTN(\"AnimateTableBoardVarCB -> daValue = \", daValue);

  int iLoop, iPos;
  string sShape, sShapeTemp, sColumn, sValue;
  dyn_anytype daColumn;

  for( iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++ )
  {
    dynClear(daColumn);
    iPos = -1;

    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL);
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");
    getValue(\"TABLE_BOARD\", \"getColumnN\", 7, daColumn);

    iPos = dynContains (daColumn, sShapeTemp);
    if( iPos > 0 )
    {
      switch(sShape)
      {
        case \".Temp.Temp\":
          sColumn = \"temperature\";
          sValue = daValue[iLoop] + \" ºC\";
          break;

        case \".HVMax.HVMax\":
          sColumn = \"hmax\";
          sValue = daValue[iLoop] + \" V\";
          break;

        default:
          DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateTableBoardVarCB() -> dpe not found \" + sShape);
          break;
      }//switch(dpe)

      setValue(\"TABLE_BOARD\", \"cellValueRC\", (iPos-1), sColumn, sValue);
    }
    else
    {
      DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateTableBoardVarCB() -> Board not found \" + sShapeTemp);
      return;
    }//else

  }//for(dsDpes)

}//AnimateTableBoardVarCB()






AnimateTableBoardVarAlarmCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimateTableBoardVarAlarmCB -> dsDpes = \",  dsDpes);
//   DebugTN(\"AnimateTableBoardVarAlarmCB -> daValue = \", daValue);


  int iLoop, iPos;
  string sShapeTemp, sName;
  dyn_anytype daColumn;

  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    dynClear(daColumn);
    iPos = -1;

    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    getValue(\"TABLE_BOARD\", \"getColumnN\", 7, daColumn);
    iPos = dynContains (daColumn, sShapeTemp);
    if( iPos > 0 )
    {
      if (daValue[iLoop] == \"\")
        daValue[iLoop] = \"_Window\";

      setValue(\"TABLE_BOARD\", \"cellBackColRC\", (iPos-1), \"alarms\", daValue[iLoop]);
    }
    else
    {
      DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateTableBoardVarAlarmCB() -> Board not found \" + sShapeTemp);
      return;
    }//else

  }//for()

}//AnimateTableBoardVarAlarmCB()





AnimatePSBoosterCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimatePSBoosterCB -> dsDpes = \",  dsDpes);
//   DebugTN(\"AnimatePSBoosterCB -> daValue = \", daValue);

  
  int iLoop, iPos;
  string sChannel, sColumn, sShape, sShapeTemp;
  dyn_anytype daColumn, daComputedValue;
  
  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    dynClear(daColumn);
    iPos = -1;    
    
    getValue(\"TABLE_PS_BOOSTERS\", \"getColumnN\", 0, daColumn);
    
    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL);
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");
    switch (sShape)
    {
      case \".PWstatus.PwCurrents.Channel_BOOSTER1\":
        sChannel = \"Booster 1\";
        sColumn = \"current\";
        daComputedValue[iLoop] = daValue[iLoop] + \" A\";
        break;
        
      case \".PWstatus.PwCurrents.Channel_BOOSTER2\":
        sChannel = \"Booster 2\";
        sColumn = \"current\";
        daComputedValue[iLoop] = daValue[iLoop] + \" A\";
        break;
        
      case \".PWstatus.PwCurrents.Channel_BOOSTER3\":
        sChannel = \"Booster 3\";
        sColumn = \"current\";
        daComputedValue[iLoop] = daValue[iLoop] + \" A\";
        break;

      case \".PWstatus.Add1\":
        sChannel = \"Booster 1\";
        sColumn = \"installed\";
         daComputedValue[iLoop] = (daValue[iLoop]==1?\"Yes\":\"No\");
        break;

      case \".PWstatus.Add2\":
        sChannel = \"Booster 2\";
        sColumn = \"installed\";
        daComputedValue[iLoop] = (daValue[iLoop]==1?\"Yes\":\"No\");
        break;
        
      case \".PWstatus.Add3\":
        sChannel = \"Booster 3\";
        sColumn = \"installed\";
        daComputedValue[iLoop] = (daValue[iLoop]==1?\"Yes\":\"No\");        
        break;        
        
      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSBoosterCB() -> Error, dpe unknown: \" + sShape);
        break;
    }
    
    iPos = dynContains (daColumn, sChannel);
    if (iPos > 0)
      setValue(\"TABLE_PS_BOOSTERS\", \"cellValueRC\", (iPos-1), sColumn, daComputedValue[iLoop] );
    else
      if (iPos == 0)
        setValue(\"TABLE_PS_BOOSTERS\", \"appendLine\", \"name\", sChannel, sColumn, daComputedValue[iLoop] );
      else
      {
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSBoosterCB() -> Error on PS boosters row: \" + iPos);
        return;
      }//else, else
      

  }//for()  
  
}


AnimatePSBoosterAlarmCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimatePSBoosterAlarmCB -> dsDpes = \",  dsDpes);
//   DebugTN(\"AnimatePSBoosterAlarmCB -> daValue = \", daValue);

  int iLoop, iPos;
  string sShape, sShapeTemp, sName, sColumn, sInstalled;
  dyn_anytype daColumn;
  
 
  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    dynClear(daColumn);
    iPos = -1;    
    
    getValue(\"TABLE_PS_BOOSTERS\", \"getColumnN\", 0, daColumn);
    
    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL);
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");
    
    switch (sShape)
    {
      case \".PWstatus.PwCurrents.Channel_BOOSTER1\":
        sColumn = \"current\";
        sName   = \"Booster 1\";
        break;
        
      case \".PWstatus.PwCurrents.Channel_BOOSTER2\":
        sColumn = \"current\";
        sName   = \"Booster 2\";
        break;
        
      case \".PWstatus.PwCurrents.Channel_BOOSTER3\":
        sColumn = \"current\";
        sName   = \"Booster 3\";
        break;

      case \".PWstatus.Add1\":
        sColumn = \"installed\";
        sName   = \"Booster 1\";
        break;

      case \".PWstatus.Add2\":
        sColumn = \"installed\";
        sName   = \"Booster 2\";
        break;
        
      case \".PWstatus.Add3\":
        sColumn = \"installed\";
        sName   = \"Booster 3\";
        break;        
        
      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSBoosterAlarmCB() -> Error, dpe unknown: \" + sShape);
        break;
    }  
    

    iPos = dynContains (daColumn, sName);
    if ( iPos > 0 )
    {
      getValue(\"TABLE_PS_BOOSTERS\", \"cellValueRC\", (iPos-1), \"installed\", sInstalled);

      if (sInstalled == \"Yes\")
      {
        if (daValue[iLoop] == \"\")
         daValue[iLoop] = \"_Window\";
        
        setMultiValue(\"TABLE_PS_BOOSTERS\", \"cellBackColRC\", (iPos-1), \"name\",      \"_Window\",
                      \"TABLE_PS_BOOSTERS\", \"cellBackColRC\", (iPos-1), \"installed\", \"_Window\");
      }
      else
      {
        daValue[iLoop] = \"_3DFace\";
        setMultiValue(\"TABLE_PS_BOOSTERS\", \"cellBackColRC\", (iPos-1), \"name\",      \"_3DFace\",
                      \"TABLE_PS_BOOSTERS\", \"cellBackColRC\", (iPos-1), \"installed\", \"_3DFace\");        
      }
      
      setValue(\"TABLE_PS_BOOSTERS\", \"cellBackColRC\", (iPos-1), sColumn, daValue[iLoop]);    
    }
    else
    {
      DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSBoosterAlarmCB() -> Error on Table Booster PS, iPos = \" + iPos);
      return;
    }//else

  }//for()    
}






AnimatePSSubCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimatePSSubCB -> dsDpes = \",  dsDpes);
//   DebugTN(\"AnimatePSSubCB -> daValue = \", daValue);

  int iLoop, iPos;
  string sShape, sShapeTemp, sChannel;
  dyn_anytype daColumn;
  
  
  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    dynClear(daColumn);
    iPos = -1;    
    
    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL); 
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");
    
    getValue(\"TABLE_PS_SUB\", \"getColumnN\", 0, daColumn);    

    switch(sShape)
    {
      case \".PWstatus.PwVoltages.Channel_FAN\":
        sChannel = \"Fan system\";
        break;
        
      case \".PWstatus.PwVoltages.Channel_CPU\":
        sChannel = \"CPU system\";
        break;
     
      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSSubCB() -> Error, dpe unknown: \" + sShape);        
        break; 
        
    }//switch(sShape)
    
    iPos = dynContains (daColumn, sChannel);
    if (iPos > 0)
      setValue(\"TABLE_PS_SUB\", \"cellValueRC\", (iPos-1), \"voltage\", daValue[iLoop] + \" V\");
    else
      if (iPos == 0)
        setValue(\"TABLE_PS_SUB\", \"appendLine\", \"name\", sChannel, \"voltage\", daValue[iLoop] + \" V\");
      else
      {
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSSubCB() -> Error on Sub PS row: \" + iPos);
        return;
      }//else, else
  }//for(dsDpes) 

}


AnimatePSSubAlarmCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimatePSSubAlarmCB -> dsDpes = \",  dsDpes);
//   DebugTN(\"AnimatePSSubAlarmCB -> daValue = \", daValue);
  
  int iLoop, iPos;
  string sShape, sShapeTemp, sName;
  dyn_anytype daColumn;
  
  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL); 
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");
    
    getValue(\"TABLE_PS_SUB\", \"getColumnN\", 0, daColumn);    
    
    if (daValue[iLoop] == \"\")
      daValue[iLoop] = \"_Window\";

    switch(sShape)
    {
      case \".PWstatus.PwVoltages.Channel_CPU\":
        sName   = \"CPU system\";
        break;

        
      case \".PWstatus.PwVoltages.Channel_FAN\":
        sName   = \"Fan system\";
        break;

        
      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSSubAlarmCB() -> Error, dpe unknown: \" + sShape);
        break;
    }//switch(sShape)    
    
    iPos = dynContains (daColumn, sName);
    if (iPos > 0)
      setValue(\"TABLE_PS_SUB\", \"cellBackColRC\", (iPos-1), \"voltage\", daValue[iLoop]);
    else
      {
       DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSSubAlarmCB() -> Error on Table Sub PS, iPos = \" + iPos);
       return;
      }//else
  }//for()    
}





AnimatePSMainCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimatePSMainCB -> dsDpes = \",  dsDpes);
//   DebugTN(\"AnimatePSMainCB -> daValue = \", daValue);

  int iLoop, iPos;
  string sChannel, sColumn, sShape, sShapeTemp;
  dyn_anytype daColumn;
  
  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    dynClear(daColumn);
    iPos = -1;    
    
    getValue(\"TABLE_PS_MAIN_POWER\", \"getColumnN\", 0, daColumn);
    
    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL);
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");
    switch (sShape)
    {
      case \".PWstatus.PwVoltages.Channel_CC_Pos\":
        sChannel = \"Channel + CC\";
        sColumn  = \"voltage\";
        break;
        
      case \".PWstatus.PwCurrents.Channel_CC_Pos\":
        sChannel = \"Channel + CC\";
        sColumn  = \"current\";
        break;        
     
      case \".PWstatus.PwVoltages.Channel_CC_Neg\":
        sChannel = \"Channel - CC\";
        sColumn  = \"voltage\";
        break;      
      
      case \".PWstatus.PwCurrents.Channel_CC_Neg\":
        sChannel = \"Channel - CC\";
        sColumn  = \"current\";
        break;
        
      case \".PWstatus.PwVoltages.Channel_DD\":
        sChannel = \"Channel DD\";
        sColumn  = \"voltage\";
        break;
      
      case \".PWstatus.PwCurrents.Channel_DD\":
        sChannel = \"Channel DD\";
        sColumn  = \"current\";
        break;
     
      case \".PWstatus.PwVoltages.Channel_PWR\":
        sChannel = \"Channel PWR\";
        sColumn  = \"voltage\";
        break;
  
      case \".PWstatus.PwCurrents.Channel_PWR\":
        sChannel = \"Channel PWR\";
        sColumn  = \"current\";
        break;
     
      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSMainCB() -> Error, dpe unknown: \" + sShape);
        break;
    }
    
    iPos = dynContains (daColumn, sChannel);
    if (iPos > 0)
      setValue(\"TABLE_PS_MAIN_POWER\", \"cellValueRC\", (iPos-1), sColumn, (daValue[iLoop] + (sColumn==\"voltage\"?\" V\":\" A\")) );
    else
      if (iPos == 0)
        setValue(\"TABLE_PS_MAIN_POWER\", \"appendLine\", \"name\", sChannel, sColumn, (daValue[iLoop] + (sColumn==\"voltage\"?\" V\":\" A\")) );
      else
      {
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSMainCB() -> Error on PS main row: \" + iPos);
        return;
      }//else, else
  }//for()
  
}



AnimatePSMainAlarmCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimatePSMainAlarmCB -> dsDpes = \", dsDpes);
//   DebugTN(\"AnimatePSMainAlarmCB -> daValue = \", daValue);
  
  int iLoop, iPos;
  string sShape, sShapeTemp, sColumn, sName;
  dyn_anytype daColumn;
  
  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL); 
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");
    
    getValue(\"TABLE_PS_MAIN_POWER\", \"getColumnN\", 0, daColumn);    
    
    if (daValue[iLoop] == \"\")
      daValue[iLoop] = \"_Window\";

    switch(sShape)
    {
      case \".PWstatus.PwVoltages.Channel_CC_Pos\":
        sName   = \"Channel + CC\";
        sColumn = \"voltage\";
        break;
        
      case \".PWstatus.PwVoltages.Channel_CC_Neg\":
        sName   = \"Channel - CC\";
        sColumn = \"voltage\";
        break;
        
      case \".PWstatus.PwVoltages.Channel_DD\":
        sName   = \"Channel DD\";
        sColumn = \"voltage\";
        break;
        
      case \".PWstatus.PwVoltages.Channel_PWR\":
        sName   = \"Channel PWR\";
        sColumn = \"voltage\";
        break;

      case \".PWstatus.PwCurrents.Channel_CC_Pos\":
        sName   = \"Channel + CC\";
        sColumn = \"current\";
        break;
        
      case \".PWstatus.PwCurrents.Channel_CC_Neg\":
        sName   = \"Channel - CC\";
        sColumn = \"current\";
        break;
        
      case \".PWstatus.PwCurrents.Channel_DD\":
        sName   = \"Channel DD\";
        sColumn = \"current\";
        break;
        
      case \".PWstatus.PwCurrents.Channel_PWR\":
        sName   = \"Channel PWR\";
        sColumn = \"current\";
        break;

     
      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSMainAlarmCB() -> Error, dpe unknown: \" + sShape);
        break;
    }//switch(sShape)    
    
    iPos = dynContains (daColumn, sName);
    if (iPos > 0)
      setValue(\"TABLE_PS_MAIN_POWER\", \"cellBackColRC\", (iPos-1), sColumn, daValue[iLoop]);
    else
      {
       DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimatePSMainAlarmCB() -> Error on Table Main PS, iPos = \" + iPos);
       return;
      }//else
  }//for()  
  
}


AnimateTableStateCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimateTableStateCB -> dsDpes = \",  dsDpes);
//   DebugTN(\"AnimateTableStateCB -> daValue = \", daValue);

  const int iNUMBER_LINES_STATE = 7;

  int iLoop, iLines;
  string sShape, sShapeTemp;

  setMultiValue(\"TABLE_STATUS_ALARMS_ACTIVE\", \"deleteAllLines\",
                \"TABLE_STATUS_ALARMS_ACTIVE\", \"backCol\", \"white\");

  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    string sMessage;

    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL);
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");

    switch(sShape)
    {
      case \".FrontPanInP.Kill\":
        if (daValue[iLoop])
          sMessage = \"Crate Killed\";
        break;

      case \".FrontPanInP.Interlock\":
        if (daValue[iLoop])
          sMessage = \"Crate interlocked\";
        break;

      case \".FrontPanInP.RemoteEnable\":
        if (daValue[iLoop])
          sMessage = \"Crate in remote\";
        break;

      case \".FrontPanInP.LocalEnable\":
        if (!daValue[iLoop])
          sMessage = \"Crate not in local\";
        break;

      case \".FrontPanOutP.OVC\":
        if (daValue[iLoop])
          sMessage = \"Over Current\";
        break;

      case \".FrontPanOutP.UNV\":
        if (daValue[iLoop])
          sMessage  = \"Under Voltage\";
        break;

      case \".FrontPanOutP.OVV\":
        if (daValue[iLoop])
          sMessage = \"Over Voltage\";
        break;

      case \".FrontPanOutP.FanFailure\":
        if (daValue[iLoop])
          sMessage = \"Fan Failure\";
        break;

      case \".PWstatus.ACstatus\":
        if (!daValue[iLoop])
          sMessage = \"AC Failure\";
        break;

      case \".PWstatus.PrimaryPS\":
        if (!daValue[iLoop])
          sMessage = \"Primary Failure\";
        break;

      default:
        break;

    }//switch(sShape)

    if( sMessage != \"\" )
      TABLE_STATUS_ALARMS_ACTIVE.appendLine(\"alarm\", makeDynAnytype(sMessage, \"_Window\", \"black\"));

  }//for(dsDpes)

  iLines = TABLE_STATUS_ALARMS_ACTIVE.lineCount();
  TABLE_STATUS_ALARMS_ACTIVE.columnHeader(0, \"State flags (\" + iLines + \")\");

  if (iLines <= iNUMBER_LINES_STATE)
  {
    setMultiValue(\"TABLE_STATUS_ALARMS_ACTIVE\", \"appendLines\", (iNUMBER_LINES_STATE - iLines), \"alarm\", \"\");
    for (iLoop = iLines ; iLoop < iNUMBER_LINES_STATE ; iLoop++)
    {
      setMultiValue(\"TABLE_STATUS_ALARMS_ACTIVE\", \"cellBackColRC\", iLoop, \"alarm\", \"_3DFace\",
                    \"TABLE_STATUS_ALARMS_ACTIVE\", \"cellBackColRC\", iLoop, \"color\", \"_3DFace\");
    }
  }

}//AnimateTableStateCB()





AnimateCrateStateCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimateCrateStateCB -> dsDpes = \",  dsDpes);
//   DebugTN(\"AnimateCrateStateCB -> daValue = \", daValue);
  
  int iLoop;
  string sShape, sShapeTemp;

  
  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    string sFont;
    dyn_string dsFont;

    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL);
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");

    switch(sShape)
    {
      case \".Communication.ConnStatus\":
        getValue(\"PRIMITIVE_TEXT_STATUS_COMM_STATE\", \"font\", sFont);
        dsFont = strsplit(sFont, \",\");

        // --- Change to normal or bold
        if( daValue[iLoop] == \"Ok\")
          dsFont[5] = 50;
        else
          dsFont[5] = 75;
        fwGeneral_dynStringToString(dsFont, sFont, \",\");
        setMultiValue(\"PRIMITIVE_TEXT_STATUS_COMM_STATE\", \"text\", ((daValue[iLoop] == \"Ok\")?\"HW Connected\":\"HW Disconnected\"),
                      \"PRIMITIVE_TEXT_STATUS_COMM_STATE\", \"font\", sFont);
        break;

      case \".FrontPanOutP.CHON\":
          setValue(\"PRIMITIVE_TEXT_STATUS_CHANNEL_ONOFF\", \"text\", (daValue[iLoop]?\"Some channels ON\":\"All channels OFF\"));
        break;
      
      case \".FrontPanInP.Vsel\":
          setValue(\"PRIMITIVE_TEXT_STATUS_V0V1\", \"text\", (daValue[iLoop]==\"\"?\"\":(daValue[iLoop]==\"TRUE\"?\"V1\":\"V0\") ) + \" selected\" );
        break;
     
      case \".FrontPanInP.Isel\":
          setValue(\"PRIMITIVE_TEXT_STATUS_I0I1\", \"text\", (daValue[iLoop]==\"\"?\"\":(daValue[iLoop]==\"TRUE\"?\"I1\":\"I0\") ) + \" selected\" );
        break;
     
      case \".Information.Debug.CmdQueueStatus\":
        setValue(\"PRIMITIVE_TEXT_STATUS_COMMAND\", \"text\", (daValue[iLoop] == 0? \"None waiting\" : daValue[iLoop] + \" in the queu\") );
        break;
     
      default:
        break; 
    }//switch(sShape)
  }//for(dsDpes)  
}

AnimateCrateStateAlarmCB(dyn_string dsDpes, dyn_anytype daValue)
{
  //   DebugTN(\"AnimateCrateStateAlarmCB -> dsDpes = \", dsDpes);
  //   DebugTN(\"AnimateCrateStateAlarmCB -> daValue = \", daValue);  

  int iLoop, iRow;
  string sShape, sShapeTemp, sColumn;
  
  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL); 
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");
    
    if (daValue[iLoop] == \"\")
      daValue[iLoop] = \"_3DFace\";

    switch(sShape)
    {
      // --- No alarm defined on string dpe... handled in value.
      case \".Communication.ConnStatus\":
//         setValue(\"PRIMITIVE_TEXT_STATUS_COMM_STATE\", \"backCol\", daValue[iLoop]);
        break;
  
      case \".FrontPanOutP.CHON\":
        setValue(\"PRIMITIVE_TEXT_STATUS_CHANNEL_ONOFF\", \"backCol\", daValue[iLoop]);
        break;
      
      case \".FrontPanInP.Vsel\":
        setValue(\"PRIMITIVE_TEXT_STATUS_V0V1\", \"backCol\", daValue[iLoop]);
        break;
     
      case \".FrontPanInP.Isel\":
        setValue(\"PRIMITIVE_TEXT_STATUS_I0I1\", \"backCol\", daValue[iLoop]);
        break;
     
      case \".Information.Debug.CmdQueueStatus\":
        setValue(\"PRIMITIVE_TEXT_STATUS_COMMAND\", \"backCol\", daValue[iLoop]);
        break;

      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateCrateStateAlarmCB() -> Error, dpe unknown: \" + sShape);
        break;        
    }//switch(sShape)
  }//for()
  
}





AnimateCpuCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimateCpuCB -> dsDpes = \",  dsDpes);
//   DebugTN(\"AnimateCpuCB -> daValue = \", daValue);
  
  setMultiValue(\"PROGRESS_BAR_RESOURCES_CPU_1\",  \"progress\", (int)daValue[2],
                \"PROGRESS_BAR_RESOURCES_CPU_5\",  \"progress\", (int)daValue[3],
                \"PROGRESS_BAR_RESOURCES_CPU_15\", \"progress\", (int)daValue[1]);
}

AnimateCpuAlarmCB(dyn_string dsDpes, dyn_anytype daValue)
{
//    DebugTN(\"AnimateCpuAlarmCB -> dsDpes = \",  dsDpes);
//    DebugTN(\"AnimateCpuAlarmCB -> daValue = \", daValue);

  int iLoop;
  string sShape, sShapeTemp;
  
  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL); 
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");
    
    if (daValue[iLoop] == \"\")
    {
      daValue[iLoop] = \"_WindowText\";
    }
      
    switch(sShape)
    {
      case \".Information.Debug.CpuLoad.1min\":
        setMultiValue(\"PROGRESS_BAR_RESOURCES_CPU_1\",         \"foreCol\", daValue[iLoop],
                      \"PROGRESS_BAR_RESOURCES_CPU_1\",         \"backCol\", \"_3DFace\",
                      \"PRIMITIVE_TEXT_RESOURCES_CPU_1_LABEL\", \"foreCol\", daValue[iLoop]);
        break;
          
      case \".Information.Debug.CpuLoad.5min\":
        setMultiValue(\"PROGRESS_BAR_RESOURCES_CPU_5\",         \"foreCol\", daValue[iLoop],
                      \"PROGRESS_BAR_RESOURCES_CPU_5\",         \"backCol\", \"_3DFace\",                        
                      \"PRIMITIVE_TEXT_RESOURCES_CPU_5_LABEL\", \"foreCol\", daValue[iLoop]);
        break;

      case \".Information.Debug.CpuLoad.15min\":
        setMultiValue(\"PROGRESS_BAR_RESOURCES_CPU_15\",         \"foreCol\", daValue[iLoop],
                      \"PROGRESS_BAR_RESOURCES_CPU_15\",         \"backCol\", \"_3DFace\",                        
                      \"PRIMITIVE_TEXT_RESOURCES_CPU_15_LABEL\", \"foreCol\", daValue[iLoop]);
        break;

      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateCpuAlarmCB() -> Error, dpe unknown: \" + sShape);
        break;          

    }//switch(sShape)
  }//for(all dpes)
}





AnimateFanCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimateFanCB -> dsDpes = \", dsDpes);
//   DebugTN(\"AnimateFanCB -> daValue = \", daValue);
  
  int iLoop, iSetFan, iLines, iFanNum, iPos;
  string sShape, sShapeTemp, sCrateFan, sNumber;
  dyn_string dsName;
  dyn_dyn_string ddsFan, ddsPowerFan;
  dyn_anytype daColumn;
  
  
  sShapeTemp = dpSubStr(dsDpes[1], DPSUB_SYS_DP);
  iSetFan = dynContains(dsDpes, sShapeTemp + \".FanStatus.FanSpeed:_online.._value\");
  if ( iSetFan <= 0 )
    setValue(\"PRIMITIVE_TEXT_COMMAND_FANSPEED\", \"text\", \"Unknown\");


  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    dynClear(dsName);
    dynClear(daColumn);
    iPos = -1;
    
    getValue(\"TABLE_FAN\", \"getColumnN\", 0, daColumn);
    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL);
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    dsName = strsplit(sShape, \".\");
    strreplace(sShape, sShapeTemp, \"\");

    switch (sShape)
    {
      case \".FanStatus.FanSpeed\":
        setValue(\"PRIMITIVE_TEXT_COMMAND_FANSPEED\", \"text\", (daValue[iLoop]==1?\"Low speed\":(daValue[iLoop]==2?\"Middle\":(daValue[iLoop]==3?\"Hi speed\":\"Unknown\"))));
        break;
        
      case \".FanStatus.SpeedFan1\":
      case \".FanStatus.SpeedFan2\":
      case \".FanStatus.SpeedFan3\":
      case \".FanStatus.SpeedFan4\":
      case \".FanStatus.SpeedFan5\":
      case \".FanStatus.SpeedFan6\":
        sNumber = substr(dsName[3], strlen(dsName[3]) - 1);            
        ddsFan[2][sNumber] = daValue[iLoop];
        ddsFan[3][sNumber] = \"Crate fan \" + sNumber;
        iPos = dynContains (daColumn, ddsFan[3][sNumber]);
//         DebugTN(iLoop + \" -> sShape = \" + sShape + \", iPos = \" + iPos);        
        if (iPos > 0)
          setValue(\"TABLE_FAN\", \"cellValueRC\", (iPos-1), \"speed\", ddsFan[2][sNumber]);
        else
          if (iPos == 0)
          {
            setValue(\"TABLE_FAN\", \"appendLine\", \"name\", ddsFan[3][sNumber], \"speed\", ddsFan[2][sNumber]);
            iFanNum++;
          }
          else
          {
            DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateFanCB() -> Error on Fan Speed, iPos = \" + iPos);
            return;
          }
        break;
        
        
      case \".FanStatus.StatFan1\":
      case \".FanStatus.StatFan2\":
      case \".FanStatus.StatFan3\":
      case \".FanStatus.StatFan4\":
      case \".FanStatus.StatFan5\":
      case \".FanStatus.StatFan6\":
        sNumber = substr(dsName[3], strlen(dsName[3]) - 1);
        ddsFan[1][sNumber] = (daValue[iLoop]==1?\"Run\":\"Stop\");
        ddsFan[3][sNumber] = \"Crate fan \" + sNumber;
        iPos = dynContains (daColumn, ddsFan[3][sNumber]);
//         DebugTN(iLoop + \" -> sShape = \" + sShape + \", iPos = \" + iPos);        
        if (iPos > 0)
          setValue(\"TABLE_FAN\", \"cellValueRC\", (iPos-1), \"state\", ddsFan[1][sNumber]);
        else
          if (iPos == 0)
          {
            setValue(\"TABLE_FAN\", \"appendLine\", \"name\", ddsFan[3][sNumber], \"state\", ddsFan[1][sNumber]);
            iFanNum++;
          }
          else
          {
            DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateFanCB() -> Error on Fan State, iPos = \" + iPos);
            return;
          }    
        break;
        
        
      case \".PWstatus.PwFanStatus.PwSpeedFan1\":
      case \".PWstatus.PwFanStatus.PwSpeedFan2\":
      case \".PWstatus.PwFanStatus.PwSpeedFan3\":
        sNumber = substr(dsName[4], strlen(dsName[4]) - 1);
        ddsPowerFan[2][sNumber] = daValue[iLoop]; 
        ddsPowerFan[3][sNumber] = \"Power fan \" + sNumber;
        iPos = dynContains (daColumn, ddsPowerFan[3][sNumber]);
//         DebugTN(iLoop + \" -> sShape = \" + sShape + \", iPos = \" + iPos);        
        if (iPos > 0)
          setValue(\"TABLE_FAN\", \"cellValueRC\", (iPos-1), \"speed\", ddsPowerFan[2][sNumber]);
        else
          if (iPos == 0)
          {
            setValue(\"TABLE_FAN\", \"appendLine\", \"name\", ddsPowerFan[3][sNumber], \"speed\", ddsPowerFan[2][sNumber]);
            iFanNum++;
          }
          else
          {
            DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateFanCB() -> Error on PowerFan Speed, iPos = \" + iPos);
            return;
          }        
        
        break;
    
        
      case \".PWstatus.PwFanStatus.PwStatFan1\":
      case \".PWstatus.PwFanStatus.PwStatFan2\":
      case \".PWstatus.PwFanStatus.PwStatFan3\":
        sNumber   = substr(dsName[4], strlen(dsName[4]) - 1);
        ddsPowerFan[1][sNumber] = (daValue[iLoop]==1?\"Run\":\"Stop\");
        ddsPowerFan[3][sNumber] = \"Power fan \" + sNumber;
        iPos = dynContains (daColumn, ddsPowerFan[3][sNumber]);
//         DebugTN(iLoop + \" -> sShape = \" + sShape + \", iPos = \" + iPos);        
        if (iPos > 0)
          setValue(\"TABLE_FAN\", \"cellValueRC\", (iPos-1), \"state\", ddsPowerFan[1][sNumber]);
        else
          if (iPos == 0)
          {
            setValue(\"TABLE_FAN\", \"appendLine\", \"name\", ddsPowerFan[3][sNumber], \"state\", ddsPowerFan[1][sNumber]);
            iFanNum++;
          }
          else
          {
            DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateFanCB() -> Error on Fan Speed, iPos = \" + iPos);
            return;
          }        
        break;

      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateFanCB() -> Error, dpe unknown: \" + sShape);
        return;
        break;
        
    }//switch(Fans)
    

  }//for(dpes)

  
  // --- Setting grey lines  
  if ( (iFanNum < 9) && (iFanNum != 0) )
  {
    setValue(\"TABLE_FAN\", \"appendLines\", 9 - iFanNum, \"name\", \"\");
    for (iLoop = iFanNum ; iLoop < 9 ; iLoop++)
    {
      setMultiValue(\"TABLE_FAN\", \"cellBackColRC\", iLoop, \"name\",  \"_3DFace\",
                    \"TABLE_FAN\", \"cellBackColRC\", iLoop, \"state\", \"_3DFace\",
                    \"TABLE_FAN\", \"cellBackColRC\", iLoop, \"speed\", \"_3DFace\");
    }//for(grey lines)
  }//if(iFanNum<9)
  
}


AnimateFanAlarmCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimateFanAlarmCB -> dsDpes = \", dsDpes);
//   DebugTN(\"AnimateFanAlarmCB -> daValue = \", daValue);  
  
  int iLoop, iRow;
  string sShape, sShapeTemp, sColumn;
  
  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL); 
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");
    
    if (daValue[iLoop] == \"\")
      daValue[iLoop] = \"_Window\";

    switch(sShape)
    {
      case \".FanStatus.StatFan1\":
        iRow = 0;
        sColumn = \"state\";
        break;
       
      case \".FanStatus.StatFan2\":
        iRow = 1;
        sColumn = \"state\";
        break;

      case \".FanStatus.StatFan3\":
        iRow = 2;
        sColumn = \"state\";
        break;

      case \".FanStatus.StatFan4\":
        iRow = 3;
        sColumn = \"state\";
        break;

      case \".FanStatus.StatFan5\":
        iRow = 4;
        sColumn = \"state\";
        break;

      case \".FanStatus.StatFan6\":
        iRow = 5;
        sColumn = \"state\";
        break;

      case \".PWstatus.PwFanStatus.PwStatFan1\":
        iRow = 6;
        sColumn = \"state\";
        break;

      case \".PWstatus.PwFanStatus.PwStatFan2\":
        iRow = 7;
        sColumn = \"state\";
        break;
       
      case \".PWstatus.PwFanStatus.PwStatFan3\":
        iRow = 8;
        sColumn = \"state\";
        break;
       
      case \".FanStatus.SpeedFan1\":
        iRow = 0;
        sColumn = \"speed\";
        break;
        
      case \".FanStatus.SpeedFan2\":
        iRow = 1;
        sColumn = \"speed\";
        break;

      case \".FanStatus.SpeedFan3\":
        iRow = 2;
        sColumn = \"speed\";
        break;

      case \".FanStatus.SpeedFan4\":
        iRow = 3;
        sColumn = \"speed\";
        break;

      case \".FanStatus.SpeedFan5\":
        iRow = 4;
        sColumn = \"speed\";
        break;

      case \".FanStatus.SpeedFan6\":
        iRow = 5;
        sColumn = \"speed\";
        break;
        
      case \".PWstatus.PwFanStatus.PwSpeedFan1\":
        iRow = 6;
        sColumn = \"speed\";
        break;
        
      case \".PWstatus.PwFanStatus.PwSpeedFan2\":
        iRow = 7;
        sColumn = \"speed\";
        break;
   
      case \".PWstatus.PwFanStatus.PwSpeedFan3\":
        iRow = 8;
        sColumn = \"speed\";
        break;
        
      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateFanAlarmCB() -> Error, dpe unknown: \" + sShape);
        return;
        break;
    }//switch()
    
    TABLE_FAN.cellBackColRC(iRow, sColumn, daValue[iLoop]);
    
  }//for()
}  






AnimateMemCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimateMemCB -> dsDpes = \", dsDpes);
//   DebugTN(\"AnimateMemCB -> daValue = \", daValue);

  unsigned uTotal, uFree, uUsed, uBuffer;
  int iStepTotal;
  
  uBuffer = daValue[1];
  uFree   = daValue[2];
  uTotal  = daValue[3];  
  uUsed   = daValue[4];

  iStepTotal = uTotal / 100;
  
  if( iStepTotal == 0 )
    iStepTotal = 1;
  
  setMultiValue(\"PROGRESS_BAR_RESOURCES_MEM_BUFFER\",   \"progress\", (uBuffer/iStepTotal),
                \"PROGRESS_BAR_RESOURCES_MEM_FREE\",     \"progress\", (uFree/iStepTotal),
                \"PROGRESS_BAR_RESOURCES_MEM_USED\",     \"progress\", (uUsed/iStepTotal),
                \"PRIMITIVE_TEXT_RESOURCES_MEM_BUFFER\", \"text\",     \"Buffers: \" + uBuffer,
                \"PRIMITIVE_TEXT_RESOURCES_MEM_FREE\",   \"text\",     \"Free: \" + uFree,
                \"PRIMITIVE_TEXT_RESOURCES_MEM_TOTAL\",  \"text\",     \"Total: \" + uTotal,
                \"PRIMITIVE_TEXT_RESOURCES_MEM_USED\",   \"text\",     \"Used: \" + uUsed);
}


AnimateMemAlarmCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimateMemAlarmCB -> dsDpes = \", dsDpes);
//   DebugTN(\"AnimateMemAlarmCB -> daValue = \", daValue);  
  
  int iLoop;
  string sShape, sShapeTemp;
  
  if (bCONNECTED)
  {
    for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
    {
      sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL); 
      sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
      strreplace(sShape, sShapeTemp, \"\");
    
      if (daValue[iLoop] == \"\")
      {
        daValue[iLoop] = \"_WindowText\";
      }
      
      switch(sShape)
      {
        case \".Information.Debug.MemoryStatus.Total\":
          setValue(\"PRIMITIVE_TEXT_RESOURCES_MEM_TOTAL\", \"backCol\", daValue[iLoop]);
          break;
          
        case \".Information.Debug.MemoryStatus.Free\":
          setMultiValue(\"PROGRESS_BAR_RESOURCES_MEM_FREE\",   \"foreCol\", daValue[iLoop],
                        \"PROGRESS_BAR_RESOURCES_MEM_FREE\",   \"backCol\", \"_3DFace\",
                        \"PRIMITIVE_TEXT_RESOURCES_MEM_FREE\", \"foreCol\", daValue[iLoop]);
          break;

        case \".Information.Debug.MemoryStatus.Used\":
          setMultiValue(\"PROGRESS_BAR_RESOURCES_MEM_USED\",   \"foreCol\", daValue[iLoop],
                        \"PROGRESS_BAR_RESOURCES_MEM_USED\",   \"backCol\", \"_3DFace\",
                        \"PRIMITIVE_TEXT_RESOURCES_MEM_USED\", \"foreCol\", daValue[iLoop]);          
          break;

        case \".Information.Debug.MemoryStatus.Buffers\":
          setMultiValue(\"PROGRESS_BAR_RESOURCES_MEM_BUFFER\",   \"foreCol\", daValue[iLoop],
                        \"PROGRESS_BAR_RESOURCES_MEM_BUFFER\",   \"backCol\", \"_3DFace\",
                        \"PRIMITIVE_TEXT_RESOURCES_MEM_BUFFER\", \"foreCol\", daValue[iLoop]);          
          break;

        default:
          DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateCpuAlarmCB() -> Error, dpe unknown: \" + sShape);
          break;          

      }//switch(sShape)
    }//for(all dpes)
  }//Animate alarms
  else
  {
    // --- set all violet
    setMultiValue(\"PROGRESS_BAR_RESOURCES_MEM_BUFFER\",  \"backCol\", \"DpDoesNotExist\",
                  \"PROGRESS_BAR_RESOURCES_MEM_FREE\",    \"backCol\", \"DpDoesNotExist\",
                  \"PROGRESS_BAR_RESOURCES_MEM_USED\",    \"backCol\", \"DpDoesNotExist\",
                  \"PRIMITIVE_TEXT_RESOURCES_MEM_TOTAL\", \"backCol\", \"DpDoesNotExist\");
    return;
  }    
}






AnimateCrateInfoCB(dyn_string dsDpes, dyn_anytype daValue)
{
//   DebugTN(\"AnimateCrateInfoCB -> dsDpes = \", dsDpes);
//   DebugTN(\"AnimateCrateInfoCB -> daValue = \", daValue);
  
  int iLoop, iIntLoop;
  string sShape, sShapeTemp;
  dyn_string dsSession, dsSessionLine, dsSessionLineTable, dsTemp, dsTemp1;


  
  for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
  {
    sShape     = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP_EL); 
    sShapeTemp = dpSubStr(dsDpes[iLoop], DPSUB_SYS_DP);
    strreplace(sShape, sShapeTemp, \"\");
    
    switch(sShape)
    {
      case \".Information.SwRelease\":
        setValue(\"PRIMITIVE_TEXT_DESCRIP_FIRMWARE\", \"text\", daValue[iLoop]);
        break;


      case \".Information.Sessions\":
        setValue(\"TABLE_SESSIONS\", \"deleteAllLines\");
        dsSession = strsplit(daValue[iLoop], \";\");

        for (iIntLoop = 1 ; iIntLoop <= dynlen(dsSession) ; iIntLoop++)
        {
          dsSessionLine = strsplit(dsSession[iIntLoop], \":\");
          dsTemp = strsplit (dsSessionLine[4], \" \");
          dsSessionLineTable[1] = dsSessionLine[1];
          dsSessionLineTable[2] = dsSessionLine[3];


          if (dynlen(dsSessionLine) > 5)
          {
            dsTemp1 = strsplit (dsSessionLine[6], \" \");
            dsSessionLineTable[3] = dsTemp[3] + \" \" + dsTemp [2] + \" \" + dsTemp1[2];
            dsSessionLineTable[4] = dsTemp[4] + \":\" + dsSessionLine[5] + \":\" + dsTemp1[1];
            dsSessionLineTable[5] = \"Not available\";
          }
          else
          {
            dsSessionLineTable[3] = dsTemp[3] + \" \" + dsTemp[2] + \" \" + dsTemp[5];
            strreplace(dsTemp[4], \"_\", \":\");
            dsSessionLineTable[4] = dsTemp[4];
            dsSessionLineTable[5] = dsSessionLine[5];            
          }
          
          setValue(\"TABLE_SESSIONS\", \"appendLine\", \"user\",     dsSessionLineTable[1],
                                                   \"protocol\", dsSessionLineTable[2],
                                                   \"date\",     dsSessionLineTable[3],
                                                   \"time\",     dsSessionLineTable[4],
                                                   \"userAdd\",  dsSessionLineTable[5]);
        }
        setMultiValue(\"TABLE_SESSIONS\", \"visible\", TRUE,
                      \"TABLE_SESSIONS\", \"backCol\", \"_3DFace\");
        break;
    
        
      case \".Communication.IPAddr\":
        setMultiValue(\"PRIMITIVE_TEXT_INTERFACE_IP_ADDR\",       \"text\",    daValue[iLoop],
                      \"PRIMITIVE_TEXT_INTERFACE_IP_ADDR\",       \"enabled\", TRUE,
                      \"PRIMITIVE_TEXT_INTERFACE_IP_ADDR\",       \"backCol\", \"_3DFace\",
                      \"PRIMITIVE_TEXT_INTERFACE_IP_ADDR_LABEL\", \"enabled\", TRUE);
        break;

        
      case \".Communication.IPNetMsk\":
        setMultiValue(\"PRIMITIVE_TEXT_INTERFACE_IP_MASK\",       \"text\",    daValue[iLoop],
                      \"PRIMITIVE_TEXT_INTERFACE_IP_MASK\",       \"enabled\", TRUE,
                      \"PRIMITIVE_TEXT_INTERFACE_IP_MASK\",       \"backCol\", \"_3DFace\",                      
                      \"PRIMITIVE_TEXT_INTERFACE_IP_MASK_LABEL\", \"enabled\", TRUE);
        break;
      
        
      case \".Communication.IpGw\":
        setMultiValue(\"PRIMITIVE_TEXT_INTERFACE_IP_GATEWAY\",       \"text\",    daValue[iLoop],
                      \"PRIMITIVE_TEXT_INTERFACE_IP_GATEWAY\",       \"enabled\", TRUE,
                      \"PRIMITIVE_TEXT_INTERFACE_IP_GATEWAY\",       \"backCol\", \"_3DFace\",                      
                      \"PRIMITIVE_TEXT_INTERFACE_IP_GATEWAY_LABEL\", \"enabled\", TRUE);
        break;
        
        
      case \".Communication.RS232Par\":
        setMultiValue(\"PRIMITIVE_TEXT_INTERFACE_RS232\",       \"text\",    daValue[iLoop],
                      \"PRIMITIVE_TEXT_INTERFACE_RS232\",       \"enabled\", TRUE,
                      \"PRIMITIVE_TEXT_INTERFACE_RS232\",       \"backCol\", \"_3DFace\",                      
                      \"PRIMITIVE_TEXT_INTERFACE_RS232_LABEL\", \"enabled\", TRUE);                 
        break;
      
        
      case \".Communication.CnetCrNum\":
        setMultiValue(\"PRIMITIVE_TEXT_INTERFACE_CAENET\",       \"text\", daValue[iLoop],
                      \"PRIMITIVE_TEXT_INTERFACE_CAENET\",       \"enabled\", TRUE,
                      \"PRIMITIVE_TEXT_INTERFACE_CAENET\",       \"backCol\", \"_3DFace\",                      
                      \"PRIMITIVE_TEXT_INTERFACE_CAENET_LABEL\", \"enabled\", TRUE);
        break;
        
        
      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateCrateInfoCB() -> Error, dpe unknown: \" + sShape);
        break;
    }//switch(sShape)
  }//for(dsDpes) 
}

AnimateCrateInfoAlarmCB(dyn_string dsDpes, dyn_anytype daValue)
{
}





//
//  This function will link DPE values and DPE alarms with a function to display in the panel
//
void AnimateItems(string sFunction, bool bRun, string sDevice, dyn_string dsDpes, bool bLinkAlarms)
{
  int iLoop;
  dyn_string dsLinkAlarmsDpes, exceptionInfo;

  
  if (dynlen(dsDpes) == 0)
    return;
   
  for (iLoop = 1; iLoop <= dynlen(dsDpes) ; iLoop++)
    dsDpes[iLoop] = sDevice + dsDpes[iLoop];
  
  // --- Link values 
  if (dpConnect(sFunction + \"CB\", bRun, dsDpes) != 0)
  {
    fwException_raise(exceptionInfo,
                      \"WARNING\",
                      \"Cannot animate panel with function:\" + sFunction + \"\\n dpConnect failure.\",
                      \"\"); 
    fwExceptionHandling_display(exceptionInfo);
    return;      
  }
  
  // --- Link alarms
  if (bLinkAlarms)
  {
    for (iLoop = 1 ; iLoop <= dynlen(dsDpes) ; iLoop++)
    {
      if ( mpHasDpeConfig(dsDpes[iLoop], \"_alert_hdl\") )
      {
        dynAppend(dsLinkAlarmsDpes, dsDpes[iLoop] + \":_alert_hdl.._act_state_color\");
      }
    }
//     DebugTN(sFunction + \" -> dsLinkAlarmsDpes = \", dsLinkAlarmsDpes);

    delay(0,50); // --- Wait shape is filled by first time.
    
    if (dynlen(dsLinkAlarmsDpes) > 0)
      if (dpConnect(sFunction + \"AlarmCB\", bRun, dsLinkAlarmsDpes) != 0)
      {
        fwException_raise(exceptionInfo,
                          \"WARNING\",
                          \"Cannot animate panel with function:\" + sFunction + \"AlarmCB\\n dpConnect failure.\",
                          \"\"); 
        fwExceptionHandling_display(exceptionInfo);
        return;      
      }    
    
  }//if(bLinkAlarms)
}



































" 0
 "main()
{
  int i; // Avoid closing panel with \"X\" window button.
}" 0
 E E E 1 -1 -1 0  10 0
""0  1
E "bool bCONNECTED;

const int BOARD_DP           = 1;
const int BOARD_POSITION     = 2;
const int BOARD_WIDE         = 3;
const int BOARD_NAME         = 4;
const int BOARD_MODEL        = 5;
const int BOARD_N_CHANNELS   = 6;
const int BOARD_DP_TEMP      = 7;
const int BOARD_DP_HV_MAX    = 8;
const int BOARD_DP_SUM_ALARM = 9;

dyn_string dsCRATEOBJECT;
dyn_dyn_string ddsELEMENTS;

changeVisibilityShape(string sGroupShapes, bool bEnable)
{
  int iLoop;

  switch (sGroupShapes)
  {
    case \"INFORMATION\":
      setValue(\"SHAPE_GROUP_INFO\", \"visible\", bEnable);
      break;


    case \"STATUS\":
      setValue(\"SHAPE_GROUP_STATUS\", \"visible\", bEnable);
      break;


    case \"TRENDING\":
      break;


    case \"COMMAND_CRATE\":
      setValue(\"SHAPE_GROUP_COMMAND_CRATE\", \"visible\", bEnable);
      break;

    case \"COMMAND_ALARMS\":
      setValue(\"SHAPE_GROUP_COMMAND_ALARMS\", \"visible\", bEnable);
      break;

    case \"COMMAND_MASSIVE\":
      setValue(\"SHAPE_GROUP_COMMAND_MASSIVE\", \"visible\", bEnable);
      break;

    default:
      DebugTN(\"fwCaenCrateSY1527Operational.pnl -> changeVisibilityShape() -> Error, unknown sGroupShapes: \" + sGroupShapes);
      return;
      break;
  }

}






changeConnectionStatus(bool bIsConnected)
{
//   DebugTN(\"changeConnectionStatus -> bIsConnected = \" + bIsConnected);

  string sColorDisconnected, sColorNormal, sAppliedColor;

  sColorDisconnected = \"_dpdoesnotexist\";
  sColorNormal       = \"_3DFace\";

  if( !bIsConnected )
    sAppliedColor = sColorDisconnected;
  else
    sAppliedColor = sColorNormal;

  setMultiValue(\"PRIMITIVE_TEXT_DESCRIP_SYMBOLIC_LABEL\", \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_DESCRIP_FIRMWARE_LABEL\", \"backCol\", sAppliedColor,

                \"PRIMITIVE_TEXT_INTERFACE_IP_ADDR_LABEL\",    \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_INTERFACE_IP_MASK_LABEL\",    \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_INTERFACE_IP_GATEWAY_LABEL\", \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_INTERFACE_RS232_LABEL\",      \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_INTERFACE_CAENET_LABEL\",     \"backCol\", sAppliedColor,

                \"TABLE_SESSIONS\", \"backCol\", sAppliedColor,

                \"PRIMITIVE_TEXT_RESOURCES_CPU_1_LABEL\",  \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_RESOURCES_CPU_5_LABEL\",  \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_RESOURCES_CPU_15_LABEL\", \"backCol\", sAppliedColor,

                \"PRIMITIVE_TEXT_RESOURCES_MEM_TOTAL\",  \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_RESOURCES_MEM_USED\",   \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_RESOURCES_MEM_BUFFER\", \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_RESOURCES_MEM_FREE\",   \"backCol\", sAppliedColor,

                \"PRIMITIVE_TEXT_STATUS_CHANNEL_ONOFF_LABEL\", \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_STATUS_V0V1_LABEL\",          \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_STATUS_I0I1_LABEL\",          \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_STATUS_COMMAND_LABEL\",       \"backCol\", sAppliedColor,
                \"PRIMITIVE_TEXT_STATUS_COMM_STATE_LABEL\",    \"backCol\", sAppliedColor);
  
  if (bIsConnected)
  {
    // --- Check items to enable crate commands
    dyn_string dsCommands, dsCommandsAll;
    dsCommandsAll = makeDynString(\".Commands.ClearAlarm\",
                                  \".Commands.Kill\",
                                  \".Commands.Format\",
                                  \".Commands.SetFanSpeed\");
    
    CheckItems(dsCommandsAll, ddsELEMENTS[fwDevice_ELEMENTS_INDEX], dsCommands);
    AnimateCommands(dsCommands);
  }
  else
  {
    setMultiValue( \"PUSH_BUTTON_COMMAND_ALARM_CONTROL\", \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_ALARM_SUMMARY\", \"enabled\", bIsConnected,

                   \"PUSH_BUTTON_COMMAND_CRATE_CLEAR_ALARM\", \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_CRATE_FAN_SPEED\",   \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_CRATE_FORMAT\",      \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_CRATE_KILL\",        \"enabled\", bIsConnected,

                   \"PUSH_BUTTON_COMMAND_MASS_ALL_OFF\",   \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_MASS_ALL_ON\",    \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_MASS_I0\",        \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_MASS_I1\",        \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_MASS_RAMP_DOWN\", \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_MASS_RAMP_UP\",   \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_MASS_TRIP\",      \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_MASS_V0\",        \"enabled\", bIsConnected,
                   \"PUSH_BUTTON_COMMAND_MASS_V1\",        \"enabled\", bIsConnected );
  }

  changeCellColor(\"TABLE_STATUS_ALARMS_ACTIVE\", bIsConnected);
  changeCellColor(\"TABLE_PS_MAIN_POWER\",        bIsConnected);
  changeCellColor(\"TABLE_PS_SUB\",               bIsConnected);
  changeCellColor(\"TABLE_PS_BOOSTERS\",          bIsConnected);
  changeCellColor(\"TABLE_FAN\",                  bIsConnected);
  changeCellColor(\"TABLE_BOARD\",                bIsConnected);

}//changeConnectionStatus()





changeCellColor(string sShape, bool bEnable)
{
  int iNumberRows, iLoop;
  string sFirstColumnName, sColor;

  if( bEnable )
    sColor = \"_Window\";
  else
    sColor = \"_dpdoesnotexist\";

  getMultiValue(sShape, \"lineCount\",  iNumberRows,
                sShape, \"columnName\", 0,           sFirstColumnName);

  for( iLoop = 0 ; iLoop < iNumberRows ; iLoop++ )
  {
    string sCellBackColor;

    getValue(sShape, \"cellBackColRC\", iLoop, sFirstColumnName, sCellBackColor);

    if( (sCellBackColor == \"_Window\") || (sCellBackColor == \"_dpdoesnotexist\") )
      setValue(sShape, \"cellBackColRC\", iLoop, sFirstColumnName, sColor);
  }

}//changeCellColor






SendCommandConfirmation(string sDpe, string sCommand, bool bCommand)
{
  bool bConfirmation;
  dyn_string exceptionInfo;

  if (!bCONNECTED)
  {
    DebugTN(\"fwCaenCrateSY1527Operational.pnl -> Command to HW -> Crate \" + dsCRATEOBJECT[fwDevice_DP_NAME] + \" not connected -> command \" + sCommand + \" aborted.\");
    return;
  }

  fwGeneral_commandConfirmation(\"CRATE\" + sDpe, sCommand, bConfirmation, exceptionInfo);
  if( dynlen(exceptionInfo) > 0 )
  {
    DebugTN(\"fwCaenCrateSY1527Operational.pnl -> Command to HW -> Error sending \" + sCommand + \" to \" + $sDpName + \" crate: \" +exceptionInfo);
    return;
  }

  if( bConfirmation )
  {
    dpSetWait(dsCRATEOBJECT[fwDevice_DP_NAME] + sDpe, bCommand);
  }

}//SendCommandConfirmation()






MassiveCommand(string sDpe, bool bIsBoolean=FALSE, bool bSetPoint=TRUE)
{
  string sValue;
  dyn_string dsReturn, exceptionInfo;
  dyn_float dfReturn;

  if( bIsBoolean )
    sValue = bSetPoint;
  else
  {
    ChildPanelOnCentralModalReturn( \"fwDevice/fwDevicePropertyChange.pnl\",
                                    \"Channel Setting Panel\",
                                    makeDynString(\"$sElement:\" + sDpe),
                                    dfReturn,
                                    dsReturn);
    if(dsReturn[1] == \"Ok\")
      sValue = dsReturn[2];
  	else
      return;
  }
  
	fwOpenProgressBar(\"Set property recursively\", \"Setting \" + sDpe + \" to \" + sValue + \" for all children...\", 1);
	fwDevice_setPropertyRecursively(dsCRATEOBJECT[fwDevice_DP_NAME], sDpe, fwDevice_HARDWARE, sValue, exceptionInfo);
	if( dynlen(exceptionInfo) > 0 )
	{
		fwCloseProgressBar(\"There were errors while setting \" + sDpe + \" to \" + sValue + \" for all children.\");
		fwExceptionHandling_display(exceptionInfo);
	}
	else
		fwCloseProgressBar(sDpe + \" set succesfully to \" + sValue + \" for all children.\");
}






void CheckItems(dyn_string dsAllItems, dyn_string dsModelItems, dyn_string &dsAllowedItems)
{
//    DebugTN(\"CheckItemsCpuLoad -> dsAllItems = \", dsAllItems);
//    DebugTN(\"CheckItemsCpuLoad -> dsModelItems = \", dsModelItems);

  int iLoop, iAnswer;
   
  for (iLoop = 1 ; iLoop <= dynlen(dsModelItems) ; iLoop++)
  {
    iAnswer = dynContains(dsAllItems, dsModelItems[iLoop]);
    if (iAnswer > 0)
      dynAppend(dsAllowedItems, dsModelItems[iLoop]);
  }
//    DebugTN(\"CheckItemsCpuLoad -> dsAllowedItems = \", dsAllowedItems);
}






AnimateCommands(dyn_string dsCommands)
{
//   DebugTN(\"AnimateCommands -> dsCommands = \", dsCommands);
  
  int iLoop;

  for( iLoop = 1 ; iLoop <= dynlen(dsCommands) ; iLoop++ )
  {
    switch(dsCommands[iLoop])
    {
      case \".Commands.ClearAlarm\":
        PUSH_BUTTON_COMMAND_CRATE_CLEAR_ALARM.enabled(TRUE);
        break;

      case \".Commands.Kill\":
        PUSH_BUTTON_COMMAND_CRATE_KILL.enabled(TRUE);
        break;

      case \".Commands.Format\":
        PUSH_BUTTON_COMMAND_CRATE_FORMAT.enabled(TRUE);
        break;

      case \".Commands.SetFanSpeed\":
        PUSH_BUTTON_COMMAND_CRATE_FAN_SPEED.enabled(TRUE);
        break;

      default:
        DebugTN(\"fwCaenCrateSY1527Operation.pnl -> AnimateCommands() -> dpe not found \" + dsCommands[iLoop]);
        break;

    }//switch(dpe)

  }//for(dsCommands)

}//AnimateCommands()



//
//  OpcStateCB should be in the ScopeLib, because the fwInstallationRedu_dpConnect function is used it.
//
OpcStateCB (dyn_string dsDp, dyn_anytype daValues)
{
  bool bConn, bConnHW;
  int iDriver, iPosDriver;
  string sManType, sDriver, sMessage, sMessageColor;
  dyn_string dsManagers;

  dsManagers = daValues[1];
  sManType = daValues[2];
  bConn = daValues[3];
  
  if( daValues[4] == \"Ok\" )
    bConnHW = TRUE;
  else
    bConnHW = FALSE;

//   DebugTN(\"OpcStateCB -> dsDp = \", dsDp);
//   DebugTN(\"OpcStateCB -> sManType = \" + sManType + \" , dsManagers = \" , dsManagers + \" , bConn = \" + bConn + \", bConnHW = \" + bConnHW);

  // --- Getting Driver system name and Driver number
  sDriver = dpSubStr(dsDp[2], DPSUB_DP);
  strreplace(sDriver, \"_Driver\", \"\");
  iDriver = sDriver;

  // --- Check driver number exists in drivers connected
  iPosDriver = dynContains(dsManagers, iDriver);
  if (iPosDriver < 1)
  {
    sMessage      = \"Manager \" + iDriver + \" NOT connected\";
    sMessageColor = \"red\";
    bCONNECTED    = FALSE;
  }
  else
  {
    if (sManType == \"SIM\")
    {
      sMessage      = \"SIM \" + iDriver + \" connected\";
      sMessageColor = \"Yellow\";
      bCONNECTED    = FALSE;
    }
    else
      if (sManType == \"OPCCLIENT\")
      {
        if (bConn)
        {
          sMessage      = \"OPC client \" + iDriver + \" connected\";
          sMessageColor = \"_3DFace\";
          if (bConnHW)
            bCONNECTED = TRUE;
          else
            bCONNECTED = FALSE;
        }
        else
        {
          sMessage      = \"OPC client \" + iDriver + \" NOT connected\";
          sMessageColor = \"red\";
          bCONNECTED    = FALSE;
        }
      }
      else
      {
        bCONNECTED = FALSE;
        fwException_raise(exceptionInfo,
                          \"WARNING\",
                          \"Caen crate: Error, driver or simulator in extrange behavior, \" + sManType,
                          \"\");
        fwExceptionHandling_display(exceptionInfo);
        return;
      }

  }//else(iPosDriver)

  setMultiValue(\"PRIMITIVE_TEXT_STATUS_MANAGER\", \"text\",    sMessage,
                \"PRIMITIVE_TEXT_STATUS_MANAGER\", \"backCol\", sMessageColor);
  
  changeConnectionStatus(bCONNECTED);
}//OpcStateCB
" 0
 3
"CBRef" "1"
"EClose" "main()
{
  int i; // Avoid closing panel with \"X\" window button.
}" 0

"dpi" "96"
0 0 0
""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 120
"RECTANGLE2"
""
1 790 490 E E E 1 E 1 E N "_Transparent" E N {255,255,255} E E
 E E
119 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E 1.461538461538462 0 1.625 -704.6153846153844 -356.2499999999999 2  1 0  "pictures/fwCaen/fwCaen_RAM.png" 4294967295 E 790 490 920 570
2 0
"PRIMITIVE_TEXT_TITLE"
""
1 35 18 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
1 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  0 E 12 2 206 23
0 2 0 "0s" 0 0 0 192 0 0  12 2 1
2
LANG:1 26 Arial,-1,19,5,40,0,0,0,0,0
LANG:10001 26 Arial,-1,19,5,40,0,0,0,0,0
0 2
LANG:1 20 CAEN Crate Operation
LANG:10001 20 CAEN Crate Operation
1 134 0 "" 0
31 "transform" 0 0 1 0 1 -12 -8
0
2 2
"PRIMITIVE_TEXT_TITLE_FIRST_FIELD"
""
1 30 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 30 30 117 42
0 2 2 "0s" 0 0 0 192 0 0  30 30 1
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 17 Main name (1/3): 
2 3
"PRIMITIVE_TEXT_TITLE_SECOND_FIELD"
""
1 282 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 282 30 379 42
0 2 2 "0s" 0 0 0 192 0 0  282 30 1
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 20 Logical name (2/3): 
2 4
"PRIMITIVE_TEXT_TITLE_THIRD_FIELD"
""
1 477 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 477 30 580 42
0 2 2 "0s" 0 0 0 192 0 0  477 30 1
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 20 Symbolic name (3/3):
28 5
"TAB_CRATE"
""
1 19.88700564971751 50 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

2
"layoutAlignment" "AlignCenter"
"selchangedcb" "main()
{
  string sActiveTab;

  
  sActiveTab = TAB_CRATE.namedActiveRegister();
  switch(sActiveTab)
  {
    case \"info\":
      changeVisibilityShape(\"INFORMATION\", TRUE);
      changeVisibilityShape(\"STATUS\",      FALSE);
      changeVisibilityShape(\"TRENDING\",    FALSE);
      break;
      
    case \"state\":
      changeVisibilityShape(\"INFORMATION\", FALSE);
      changeVisibilityShape(\"STATUS\",      TRUE);
      changeVisibilityShape(\"TRENDING\",    FALSE);      
      break;
      
    case \"trend\":
      changeVisibilityShape(\"INFORMATION\", FALSE);
      changeVisibilityShape(\"STATUS\",      FALSE);
      changeVisibilityShape(\"TRENDING\",    TRUE);      
      break;
      
    default:
      DebugTN(\"fwCaenCrateSY1527Operational.pnl -> Tab changed -> Error, unknown tab: \" + sActiveTab);
      return;
      break;
      
  }//switch(sActiveTab)
}
"
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0  8 48 710 72
E3 "info" 1
LANG:1 17 Crate information
0
"state" 1
LANG:1 12 Crate status
0
"trend" 1
LANG:1 8 Trending
0

13 6
"PUSH_BUTTON_CLOSE"
""
1 633 817 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
6 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
0  631 815 715 843

T 
2
LANG:1 5 Close
LANG:10001 5 Close
"main()
{
  PanelOff();
}
" 0
 E E E
30 7
"FRAME_MAIN"
""
1 20 74 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
7 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1 0 1.023584905660377 -9.999999999999963 -12.74528301886792 0 E 20 74 721 711
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 0 
30 9
"FRAME_COMMANDS"
""
1 20 74 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
9 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1 0 0.1415094339622643 -10 709.5283018867924 0 E 20 74 721 711
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 14 Crate commands
13 10
"PUSH_BUTTON_COMMAND_MASS_V0"
""
1 20.00000000000011 760 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
10 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  18 758 112 782

T 
2
LANG:1 6 Set v0
LANG:10001 6 Set v0
"main()
{
  MassiveCommand(\".settings.v0\");
}" 0
 E E E
13 11
"PUSH_BUTTON_COMMAND_MASS_I0"
""
1 20.00000000000011 780 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
11 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  18 778 112 802

T 
2
LANG:1 6 Set i0
LANG:10001 6 Set i0
"main()
{
  MassiveCommand(\".settings.i0\");
}" 0
 E E E
25 20
"TABLE_SESSIONS"
""
1 -1058.695652173913 314.1333333333333 E E E 1 E 0 E N "_WindowText" E N "_3DFace" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"layoutAlignment" "AlignCenter"
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0  318 238 680 412
EE 1 0 1 5 0 "user" 7 1 0 "[0s,,,ALIGNMENT_CENTER]" 1
LANG:1 4 User
E
1
LANG:1 0 

65 "protocol" 7 1 0 "[0s,,,ALIGNMENT_CENTER]" 1
LANG:1 8 Protocol
E
1
LANG:1 0 

70 "userAdd" 10 1 0 "s" 1
LANG:1 12 User address
E
1
LANG:1 0 

90 "date" 8 1 0 "s" 1
LANG:1 4 Date
E
1
LANG:1 0 

75 "time" 5 1 0 "s" 1
LANG:1 4 Time
E
1
LANG:1 0 

55 
13 13 10 0
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
2 21
"PRIMITIVE_TEXT_INTERFACE_RS232"
""
1 482 162 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
21 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 482 162 622 176
0 2 2 "0s" 0 0 0 64 0 0  482 162 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 22
"PRIMITIVE_TEXT_INTERFACE_IP_GATEWAY"
""
1 482 142 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
22 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 482 142 622 156
0 2 2 "0s" 0 0 0 64 0 0  482 142 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 23
"PRIMITIVE_TEXT_INTERFACE_IP_ADDR_LABEL"
""
1 402 102 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
23 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 402 102 459 114
0 2 2 "0s" 0 0 0 192 0 0  402 102 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 11 IP address:
LANG:10001 8 HW name:
2 24
"PRIMITIVE_TEXT_INTERFACE_IP_MASK_LABEL"
""
1 402 122 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
24 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 402 122 445 134
0 2 2 "0s" 0 0 0 192 0 0  402 122 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 8 IP mask:
LANG:10001 11 Alias name:
2 25
"PRIMITIVE_TEXT_INTERFACE_RS232_LABEL"
""
1 402 162 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
25 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 402 162 469 174
0 2 2 "0s" 0 0 0 192 0 0  402 162 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 12 RS232 setup:
LANG:10001 6 Model:
2 26
"PRIMITIVE_TEXT_INTERFACE_IP_GATEWAY_LABEL"
""
1 402 142 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
26 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 402 142 463 154
0 2 2 "0s" 0 0 0 192 0 0  402 142 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 11 IP gateway:
LANG:10001 14 Symbolic name:
2 27
"PRIMITIVE_TEXT_INTERFACE_IP_ADDR"
""
1 482 102 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
27 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 482 102 622 116
0 2 2 "0s" 0 0 0 64 0 0  482 102 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 28
"PRIMITIVE_TEXT_INTERFACE_IP_MASK"
""
1 482 122 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
28 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 482 122 622 136
0 2 2 "0s" 0 0 0 64 0 0  482 122 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 29
"PRIMITIVE_TEXT_INTERFACE_CAENET"
""
1 482 182 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
29 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 482 182 622 196
0 2 2 "0s" 0 0 0 64 0 0  482 182 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 30
"PRIMITIVE_TEXT_INTERFACE_CAENET_LABEL"
""
1 402 182 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
30 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 402 182 461 194
0 2 2 "0s" 0 0 0 192 0 0  402 182 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 10 CAENET ID:
LANG:10001 14 Symbolic name:
2 31
"PRIMITIVE_TEXT_DESCRIP_MODEL"
""
1 132 162 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
31 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 132 162 272 176
0 2 2 "0s" 0 0 0 64 0 0  132 162 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 32
"PRIMITIVE_TEXT_DESCRIP_SYMBOLIC"
""
1 132 142 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
32 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 132 142 272 156
0 2 2 "0s" 0 0 0 64 0 0  132 142 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 33
"PRIMITIVE_TEXT_DESCRIP_HW_LABEL"
""
1 52.00000000000023 102 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
33 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 52.00000000000023 102 104 114
0 2 2 "0s" 0 0 0 192 0 0  52.00000000000023 102 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 8 HW name:
LANG:10001 8 HW name:
2 34
"PRIMITIVE_TEXT_DESCRIP_LOGICAL_LABEL"
""
1 52.00000000000023 122 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
34 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 52.00000000000023 122 109 134
0 2 2 "0s" 0 0 0 192 0 0  52.00000000000023 122 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 11 Alias name:
LANG:10001 11 Alias name:
2 35
"PRIMITIVE_TEXT_DESCRIP_MODEL_LABEL"
""
1 52 162 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
35 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 52 162 86 174
0 2 2 "0s" 0 0 0 192 0 0  52 162 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 6 Model:
LANG:10001 6 Model:
2 36
"PRIMITIVE_TEXT_DESCRIP_SYMBOLIC_LABEL"
""
1 52.00000000000023 142 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
36 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 52.00000000000023 142 128 154
0 2 2 "0s" 0 0 0 192 0 0  52.00000000000023 142 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 14 Symbolic name:
LANG:10001 14 Symbolic name:
2 37
"PRIMITIVE_TEXT_DESCRIP_HW"
""
1 132 102 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
37 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 132 102 272 116
0 2 2 "0s" 0 0 0 64 0 0  132 102 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 38
"PRIMITIVE_TEXT_DESCRIP_LOGICAL"
""
1 132 122 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
38 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 132 122 272 136
0 2 2 "0s" 0 0 0 64 0 0  132 122 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 39
"PRIMITIVE_TEXT_DESCRIP_FIRMWARE"
""
1 132 182 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
39 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 132 182 272 196
0 2 2 "0s" 0 0 0 64 0 0  132 182 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 40
"PRIMITIVE_TEXT_DESCRIP_FIRMWARE_LABEL"
""
1 52.00000000000023 182 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
40 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 52.00000000000023 182 121 194
0 2 2 "0s" 0 0 0 192 0 0  52.00000000000023 182 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Firmware ver:
LANG:10001 14 Symbolic name:
29 41
"PROGRESS_BAR_RESOURCES_CPU_1"
""
1 90.00000000000011 583.9999999999991 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
41 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

11
"format" "string %p%"
"textVisible" "bool TRUE"
"value" "int 0"
"contextMenuPolicy" "enum 0"
"lineWidth" "int 0"
"frameShadow" "enum 16"
"frameShape" "enum 4"
"totalSteps" "int 100"
"percentageVisible" "bool FALSE"
"midLineWidth" "int 0"
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  90 584 226 594
11 ProgressBar
0
E30 42
"FRAME_RESOURCES"
""
1 10 383 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
42 0 0 0 0 0
E E E
1
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 0.8571428571428569 0 3.880597014925378 21.42857142857145 -1056.26865671642 0 E 10 383 781 451
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 16 System resources
LANG:10001 16 System resources
2 43
"PRIMITIVE_TEXT_RESOURCES_CPU_LABEL"
""
1 28 73.99999999999994 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
43 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 50 460 108 472
0 2 2 "0s" 0 0 0 192 0 0  50 460 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 10 CPU usage:
LANG:10001 10 CPU usage:
29 44
"PROGRESS_BAR_RESOURCES_CPU_5"
""
1 90.00000000000011 614.0000000000003 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
44 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

10
"format" "string %p%"
"textVisible" "bool TRUE"
"value" "int 0"
"frameShape" "enum 4"
"totalSteps" "int 100"
"percentageVisible" "bool FALSE"
"frameShadow" "enum 16"
"lineWidth" "int 0"
"midLineWidth" "int 0"
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  90 614 226 624
11 ProgressBar
0
E29 45
"PROGRESS_BAR_RESOURCES_CPU_15"
""
1 90.00000000000011 643.9999999999991 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
45 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

9
"format" "string %p%"
"textVisible" "bool TRUE"
"value" "int 0"
"frameShape" "enum 4"
"totalSteps" "int 100"
"percentageVisible" "bool FALSE"
"frameShadow" "enum 16"
"lineWidth" "int 0"
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  90 644 226 654
11 ProgressBar
0
E2 48
"PRIMITIVE_TEXT_RESOURCES_MEM_LABEL"
""
1 -170.0000000000001 69.99999999999992 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
48 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 380 460 424 472
0 2 2 "0s" 0 0 0 192 0 0  380 460 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 7 Memory:
LANG:10001 7 Memory:
2 49
"PRIMITIVE_TEXT_RESOURCES_MEM_TOTAL"
""
1 600 520 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
49 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 600 520 645 532
0 2 2 "0s" 0 0 0 192 0 0  600 520 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 10 Total: ...
LANG:10001 12 Total: 12345
2 50
"PRIMITIVE_TEXT_RESOURCES_MEM_FREE"
""
1 560 641.9999999999992 E E E 1 E 1 E N {0,0,0} E N "_3DFace" E E
 E E
50 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 560 641.9999999999992 603 654
0 2 2 "0s" 0 0 0 192 0 0  560 641.9999999999992 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 9 Free: ...
LANG:10001 11 Free: 12345
2 51
"PRIMITIVE_TEXT_RESOURCES_MEM_BUFFER"
""
1 560 611.9999999999992 E E E 1 E 1 E N {0,0,0} E N "_3DFace" E E
 E E
51 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 560 611.9999999999992 616 624
0 2 2 "0s" 0 0 0 192 0 0  560 611.9999999999992 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 12 Buffers: ...
LANG:10001 14 Buffers: 12345
2 52
"PRIMITIVE_TEXT_RESOURCES_MEM_USED"
""
1 560 581.9999999999992 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
52 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 560 581.9999999999992 605 594
0 2 2 "0s" 0 0 0 192 0 0  560 581.9999999999992 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 9 Used: ...
LANG:10001 11 Used: 12345
2 53
"PRIMITIVE_TEXT_RESOURCES_CPU_1_LABEL"
""
1 231 581.9999999999991 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
53 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 231 581.9999999999991 273 594
0 2 2 "0s" 0 0 0 192 0 0  231 581.9999999999991 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 9 last min.
LANG:10001 14 in last minute
2 54
"PRIMITIVE_TEXT_RESOURCES_CPU_5_LABEL"
""
1 231 612.0000000000003 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
54 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 231 612.0000000000003 282 624
0 2 2 "0s" 0 0 0 192 0 0  231 612.0000000000003 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 11 last 5 min.
LANG:10001 17 in last 5 minutes
2 55
"PRIMITIVE_TEXT_RESOURCES_CPU_15_LABEL"
""
1 231 641.9999999999996 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
55 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 231 641.9999999999996 288 654
0 2 2 "0s" 0 0 0 192 0 0  231 641.9999999999996 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 12 last 15 min.
LANG:10001 18 in last 15 minutes
29 57
"PROGRESS_BAR_RESOURCES_MEM_USED"
""
1 420 583.9999999999992 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
57 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

9
"textVisible" "bool TRUE"
"value" "int 0"
"frameShape" "enum 4"
"totalSteps" "int 100"
"percentageVisible" "bool FALSE"
"frameShadow" "enum 16"
"lineWidth" "int 0"
"midLineWidth" "int 0"
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  420 584 554 594
11 ProgressBar
0
E29 58
"PROGRESS_BAR_RESOURCES_MEM_BUFFER"
""
1 420 613.9999999999991 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
58 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

8
"textVisible" "bool TRUE"
"value" "int 0"
"frameShape" "enum 4"
"totalSteps" "int 100"
"percentageVisible" "bool FALSE"
"frameShadow" "enum 16"
"lineWidth" "int 0"
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  420 614 554 624
11 ProgressBar
0
E29 59
"PROGRESS_BAR_RESOURCES_MEM_FREE"
""
1 420 643.9999999999991 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
59 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

8
"textVisible" "bool TRUE"
"value" "int 0"
"frameShape" "enum 4"
"totalSteps" "int 100"
"percentageVisible" "bool FALSE"
"frameShadow" "enum 16"
"lineWidth" "int 0"
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  420 644 554 654
11 ProgressBar
0
E2 61
"PRIMITIVE_TEXT_STATUS_MANAGER"
""
1 89.99999999999994 202 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
61 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 89.99999999999994 202 244.9999999999999 216
0 2 2 "0s" 0 0 0 64 0 0  89.99999999999994 202 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 10 Loading...
LANG:10001 10 Loading...
2 62
"PRIMITIVE_TEXT_STATUS_MANAGER_LABEL"
""
1 32 202 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
62 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 32 202 80 214
0 2 2 "0s" 0 0 0 192 0 0  32 202 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 8 Manager:
LANG:10001 8 Manager:
30 64
"FRAME_STATUS"
""
1 10 43 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
64 0 0 0 0 0
E E E
1
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1.446808510638298 0 1.094890510948905 5.531914893617024 32.91970802919708 0 E 10 43 481 181
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 12 Crate status
LANG:10001 12 Crate status
2 65
"PRIMITIVE_TEXT_STATUS_COMM_STATE_LABEL"
""
1 32.17132923916535 182 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
65 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E 1.009174311926605 0 1 -0.2752293577981635 0 1 E 32 182 138 194
0 2 2 "0s" 0 0 0 192 0 0  32 182 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 20 Communication state:
LANG:10001 20 Communication state:
2 66
"PRIMITIVE_TEXT_STATUS_CHANNEL_ONOFF_LABEL"
""
1 31.99999999999996 102 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
66 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 31.99999999999996 102 109 114
0 2 2 "0s" 0 0 0 192 0 0  31.99999999999996 102 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 15 Channels state:
LANG:10001 15 Channels state:
2 67
"PRIMITIVE_TEXT_STATUS_V0V1_LABEL"
""
1 31.99999999999996 122 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
67 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 31.99999999999996 122 110 134
0 2 2 "0s" 0 0 0 192 0 0  31.99999999999996 122 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 16 V0/V1 selection:
LANG:10001 15 V0/V1 selected:
25 68
"TABLE_STATUS_ALARMS_ACK"
""
1 871.4273504273508 74 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
68 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  400 96 544 220
EE 1 0 1 1 0 "alarm" 16 1 0 "s" 2
LANG:1 23 Alarms Ack required (0)
LANG:10001 15 State flags (0)
E
2
LANG:1 0 
LANG:10001 0 

137 
14 14 10 10
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
2 69
"PRIMITIVE_TEXT_STATUS_COMMAND_LABEL"
""
1 32 162 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
69 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 32 162 127 174
0 2 2 "0s" 0 0 0 192 0 0  32 162 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 17 Commands waiting:
LANG:10001 17 Commands waiting:
2 70
"PRIMITIVE_TEXT_STATUS_COMM_STATE"
""
1 139.9999999999999 182 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
70 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 139.9999999999999 182 244.9999999999999 196
0 2 2 "0s" 0 0 0 64 0 0  139.9999999999999 182 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 72
"PRIMITIVE_TEXT_STATUS_CHANNEL_ONOFF"
""
1 139.9999999999999 102 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
72 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 139.9999999999999 102 244.9999999999999 116
0 2 2 "0s" 0 0 0 64 0 0  139.9999999999999 102 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 74
"PRIMITIVE_TEXT_STATUS_V0V1"
""
1 139.9999999999999 122 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
74 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 139.9999999999999 122 244.9999999999999 136
0 2 2 "0s" 0 0 0 64 0 0  139.9999999999999 122 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
2 76
"PRIMITIVE_TEXT_STATUS_COMMAND"
""
1 139.9999999999999 162 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
76 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 139.9999999999999 162 244.9999999999999 176
0 2 2 "0s" 0 0 0 64 0 0  139.9999999999999 162 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
25 78
"TABLE_FAN"
""
1 101.8421052631579 260 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
78 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  465 258 686 411
EE 1 0 1 3 0 "name" 10 1 0 "[0s,,,ALIGNMENT_BEGINNING]" 2
LANG:1 3 Fan
LANG:10001 3 Fan
E
2
LANG:1 0 
LANG:10001 0 

90 "state" 4 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 5 State
LANG:10001 5 State
E
2
LANG:1 0 
LANG:10001 0 

43 "speed" 9 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 14 Speed [r.p.m.]
LANG:10001 14 Speed [r.p.m.]
E
2
LANG:1 0 
LANG:10001 0 

80 
14 14 10 10
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
30 79
"FRAME_POWER_SUPPLY"
""
1 10 43 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
79 0 0 0 0 0
E E E
1
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 0.8936170212765958 0 1.313868613138686 11.06382978723404 183.5036496350365 0 E 10 43 481 181
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 20 Power supply details
LANG:10001 20 Power supply details
30 80
"FRAME_FAN_STATE"
""
1 10 43 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
80 0 0 0 0 0
E E E
1
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 0.5319148936170212 0 1.313868613138686 444.6808510638298 183.5036496350365 0 E 10 43 481 181
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 9 Fan state
LANG:10001 9 Fan state
25 81
"TABLE_PS_BOOSTERS"
""
1 234 331 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
81 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  28 345 245 414
EE 1 0 1 3 0 "name" 9 1 0 "s" 2
LANG:1 12 Booster name
LANG:10001 12 Booster name
E
2
LANG:1 0 
LANG:10001 0 

80 "installed" 5 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 9 Installed
LANG:10001 9 Installed
E
2
LANG:1 0 
LANG:10001 0 

50 "current" 9 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 13 Current value
LANG:10001 13 Current value
E
2
LANG:1 0 
LANG:10001 0 

80 
14 14 10 10
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
25 82
"TABLE_PS_MAIN_POWER"
""
1 234 237.5 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
82 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  28 258 245 340
EE 1 0 1 3 0 "name" 9 1 0 "s" 2
LANG:1 4 Name
LANG:10001 4 Name
E
2
LANG:1 0 
LANG:10001 0 

80 "voltage" 7 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 7 Voltage
LANG:10001 7 Voltage
E
2
LANG:1 0 
LANG:10001 0 

65 "current" 7 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 7 Current
LANG:10001 7 Current
E
2
LANG:1 0 
LANG:10001 0 

65 
14 14 10 10
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
25 83
"TABLE_PS_SUB"
""
1 688.2608695652179 233 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
83 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  260 258 412 312
EE 1 0 1 2 0 "name" 9 1 0 "s" 2
LANG:1 9 Subsystem
LANG:10001 9 Subsystem
E
2
LANG:1 0 
LANG:10001 0 

80 "voltage" 7 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 7 Voltage
LANG:10001 7 Voltage
E
2
LANG:1 0 
LANG:10001 0 

65 
14 14 10 10
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
30 85
"FRAME_BOARD"
""
1 10 43 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
85 0 0 0 0 0
E E E
1
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1.446808510638298 0 2.014598540145985 5.531914893617019 341.3722627737226 0 E 10 43 481 181
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 12 Board resume
LANG:10001 12 Board resume
25 86
"TABLE_BOARD"
""
1 30 447.9999999999994 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
86 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  28 446 492 696
EE 1 0 1 8 0 "slot" 4 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 4 Slot
LANG:10001 4 Slot
E
2
LANG:1 0 
LANG:10001 0 

40 "name" 11 1 0 "s" 2
LANG:1 4 Name
LANG:10001 4 Name
E
2
LANG:1 0 
LANG:10001 0 

97 "model" 6 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 5 Model
LANG:10001 5 Model
E
2
LANG:1 0 
LANG:10001 0 

60 "number" 4 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 6 N. Ch.
LANG:10001 6 N. Ch.
E
2
LANG:1 0 
LANG:10001 0 

40 "temperature" 7 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 11 Temperature
LANG:10001 11 Temperature
E
2
LANG:1 0 
LANG:10001 0 

70 "hmax" 6 1 0 "[0s,,,ALIGNMENT_CENTER]" 2
LANG:1 7 Hv. Max
LANG:10001 7 Hv. Max
E
2
LANG:1 0 
LANG:10001 0 

60 "alarms" 10 1 0 "s" 2
LANG:1 14 Summary alarms
LANG:10001 6 Alarms
E
2
LANG:1 0 
LANG:10001 0 

90 "dp" 6 0 0 "s" 2
LANG:1 9 datapoint
LANG:10001 6 Alarms
E
2
LANG:1 0 
LANG:10001 0 

60 
14 14 10 10
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
25 91
"TABLE_STATUS_ALARMS_MASKED"
""
1 839.427350427351 74 E E E 0 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
91 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  548 96 692 220
EE 1 0 1 1 0 "alarm" 16 1 0 "s" 2
LANG:1 17 Alarms Masked(0) 
LANG:10001 15 State flags (0)
E
2
LANG:1 0 
LANG:10001 0 

137 
14 14 10 10
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
25 92
"TABLE_STATUS_ALARMS_ACTIVE"
""
1 513.6581196581201 98 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
92 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  252 96 396 220
EE 1 0 1 3 0 "alarm" 14 1 0 "s" 2
LANG:1 10 Alarms (0)
LANG:10001 15 State flags (0)
E
2
LANG:1 0 
LANG:10001 0 

120 "color" 1 1 0 "s" 2
LANG:1 0 
LANG:10001 15 State flags (0)
E
2
LANG:1 0 
LANG:10001 0 

17 "dpe" 1 0 0 "s" 2
LANG:1 0 
LANG:10001 15 State flags (0)
E
2
LANG:1 0 
LANG:10001 0 

17 
14 14 10 10
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
30 94
"FRAME_SESSIONS"
""
1 750 214 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
94 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1.407407407407408 0 1.136363636363636 -745.5555555555561 -23.1818181818182 0 E 750 214 1021 391
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 28 Sessions opened in the crate
30 95
"FRAME_INTERFACES"
""
1 1080 84 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
95 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1.151515151515152 0 1.031746031746032 -933.6363636363643 -6.666666666666693 0 E 1080 84 1411 211
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 10 Interfaces
30 96
"FRAME_DESCRIPTION"
""
1 1080 84 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
96 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 0.8181818181818182 0 1.031746031746032 -853.6363636363637 -6.666666666666704 0 E 1080 84 1411 211
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 17 Crate description
13 98
"PUSH_BUTTON_COMMAND_MASS_ALL_ON"
""
1 420 760 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
98 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  418 758 522 782

T 
2
LANG:1 15 All channels ON
LANG:10001 11 Channels ON
"main()
{
  MassiveCommand(\".settings.onOff\", TRUE, TRUE);
}" 0
 E E E
13 99
"PUSH_BUTTON_COMMAND_MASS_RAMP_UP"
""
1 220 760 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
99 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  218 758 312 782

T 
2
LANG:1 11 Set ramp up
LANG:10001 11 Set ramp up
"main()
{
  MassiveCommand(\".settings.rUp\");
}" 0
 E E E
13 100
"PUSH_BUTTON_COMMAND_MASS_ALL_OFF"
""
1 420 780 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
100 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  418 778 522 802

T 
2
LANG:1 16 All channels OFF
LANG:10001 12 Channels OFF
"main()
{
  MassiveCommand(\".settings.onOff\", TRUE, FALSE);
}" 0
 E E E
13 101
"PUSH_BUTTON_COMMAND_MASS_RAMP_DOWN"
""
1 220 780 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
101 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  218 778 312 802

T 
2
LANG:1 13 Set ramp down
LANG:10001 13 Set ramp down
"main()
{
  MassiveCommand(\".settings.rDwn\");
}" 0
 E E E
13 102
"PUSH_BUTTON_COMMAND_MASS_TRIP"
""
1 320 760 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
102 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  318 758 412 782

T 
2
LANG:1 13 Set trip time
LANG:10001 13 Set trip time
"main()
{
  MassiveCommand(\".settings.tripTime\");
}" 0
 E E E
13 103
"PUSH_BUTTON_COMMAND_MASS_V1"
""
1 120.0000000000001 760 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
103 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  118 758 212 782

T 
2
LANG:1 6 Set v1
LANG:10001 6 Set v1
"main()
{
  MassiveCommand(\".settings.v1\");
}" 0
 E E E
13 104
"PUSH_BUTTON_COMMAND_MASS_I1"
""
1 120.0000000000001 780 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
104 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  118 778 212 802

T 
2
LANG:1 6 Set i1
LANG:10001 6 Set i1
"main()
{
  MassiveCommand(\".settings.i1\");
}" 0
 E E E
2 105
"PRIMITIVE_TEXT_COMMAND_FANSPEED_LABEL"
""
1 422 763 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
105 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 422 763 506 775
0 2 2 "0s" 0 0 0 192 0 0  422 763 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 16 Crate fan speed:
LANG:10001 16 Crate fan speed:
2 107
"PRIMITIVE_TEXT_COMMAND_FANSPEED"
""
1 510 763 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
107 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 510 763 566 777
0 2 2 "0s" 0 0 0 65 0 0  510 763 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 1 a
LANG:10001 1 a
13 108
"PUSH_BUTTON_COMMAND_ALARM_CONTROL"
""
1 20 760 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
108 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  18 758 112 782

T 
2
LANG:1 14 Alarms control
LANG:10001 14 Alarms control
"main()
{
  ChildPanelOnCentralModal(\"fwDeviceEditorNavigator/fwAction.pnl\",
                           \"Action Panel\",
                           makeDynString(\"$sDpName:\" + $sDpName));
}" 0
 E E E
13 109
"PUSH_BUTTON_COMMAND_CRATE_FORMAT"
""
1 220 760 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
109 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  218 758 312 782

T 
2
LANG:1 6 Format
LANG:10001 6 Format
E E E E
13 110
"PUSH_BUTTON_COMMAND_CRATE_CLEAR_ALARM"
""
1 120 760 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
110 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  118 758 212 782

T 
2
LANG:1 11 Clear alarm
LANG:10001 11 Clear alarm
"main()
{
  SendCommandConfirmation(\".Commands.ClearAlarm\", \"Clear alarm\", TRUE);
}" 0
 E E E
13 111
"PUSH_BUTTON_COMMAND_CRATE_KILL"
""
1 20 759.9999999999999 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
111 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  18 758 112 782

T 
2
LANG:1 4 Kill
LANG:10001 4 Kill
"main()
{
  SendCommandConfirmation(\".Commands.Kill\", \"Kill\", TRUE);
}" 0
 E E E
28 112
"TAB_COMMANDS"
""
1 20 735 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
112 0 0 0 0 0
E E E
0
1
LANG:1 0 

2
"layoutAlignment" "AlignCenter"
"selchangedcb" "main()
{
  string sActiveTab;

  
  sActiveTab = TAB_COMMANDS.namedActiveRegister();
  switch(sActiveTab)
  {
    case \"general\":
      changeVisibilityShape(\"COMMAND_CRATE\",   TRUE);
      changeVisibilityShape(\"COMMAND_ALARMS\",  FALSE);
      changeVisibilityShape(\"COMMAND_MASSIVE\", FALSE);
      break;
      
    case \"alarms\":
      changeVisibilityShape(\"COMMAND_CRATE\",   FALSE);
      changeVisibilityShape(\"COMMAND_ALARMS\",  TRUE);
      changeVisibilityShape(\"COMMAND_MASSIVE\", FALSE);      
      break;
      
    case \"massive\":
      changeVisibilityShape(\"COMMAND_CRATE\",   FALSE);
      changeVisibilityShape(\"COMMAND_ALARMS\",  FALSE);
      changeVisibilityShape(\"COMMAND_MASSIVE\", TRUE);      
      break;
      
    default:
      DebugTN(\"fwCaenCrateSY1527Operational.pnl -> Tab changed -> Error, unknown tab: \" + sActiveTab);
      return;
      break;
      
  }//switch(sActiveTab)
}"
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0  18 733 692 757
E3 "general" 1
LANG:1 24 General crate commanding
0
"alarms" 1
LANG:1 14 Alarms control
0
"massive" 1
LANG:1 26 Massive channel commanding
0

2 116
"PRIMITIVE_TEXT_STATUS_I0I1_LABEL"
""
1 31.99999999999996 142 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
115 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 31.99999999999996 142 106 154
0 2 2 "0s" 0 0 0 192 0 0  31.99999999999996 142 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 16 I0/I1 selection:
LANG:10001 15 V0/V1 selected:
2 117
"PRIMITIVE_TEXT_STATUS_I0I1"
""
1 139.9999999999999 142 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
116 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 139.9999999999999 142 244.9999999999999 156
0 2 2 "0s" 0 0 0 64 0 0  139.9999999999999 142 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 13 Not available
LANG:10001 13 Not available
6 119
"RECTANGLE_CPU"
""
1 790 490 E E E 1 E 1 E N "_Transparent" E N {255,255,255} E E
 E E
118 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E 1.307692307692308 0 1.874999999999998 -923.0769230769229 -498.7499999999992 2  1 0  "pictures/fwCaen/fwCaen_CPU.png" 4294967295 E 790 490 920 570
6 121
"RECTANGLE_IMAGE"
""
1 750 230 E E E 1 E 1 E N "_Transparent" E N "_Transparent" E E
 E E
120 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E 1 0 1 -720 -2.842170943040401e-014 1 E 750 230 1020 420
13 125
"PUSH_BUTTON_COMMAND_ALARM_SUMMARY"
""
1 120 760 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
123 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  118 758 212 782

T 
2
LANG:1 12 Alarm sumary
LANG:10001 14 Alarms control
"main()
{
  ChildPanelOnCentralModal(	\"fwConfigs/fwAlarmSummaryOperationPopupPanel.pnl\",
                            \"Alert Summary Panel\",
                            makeDynString(\"$sDpe:\" + dsCRATEOBJECT[fwDevice_DP_NAME] + \".\") );
}" 0
 E E E
13 129
"PUSH_BUTTON_COMMAND_CRATE_FAN_SPEED"
""
1 570 760 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
126 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  568 758 622 782

T 
2
LANG:1 6 Switch
LANG:10001 6 Format
"main()
{
  int iNewSpeed;
  string sCurrentSpeed;

  sCurrentSpeed = PRIMITIVE_TEXT_COMMAND_FANSPEED.text();
  switch (sCurrentSpeed)
  {
    case \"Low speed\":
      iNewSpeed = 2; // Middle speed
      break;
      
    case \"Middle\":
      iNewSpeed = 3; // Hi speed
      break;
      
    case \"Hi speed\":
      iNewSpeed = 1; // Low speed
      break;
        
    case \"Unknown\":
      return;
      break;
        
    default:
      DebugTN(\"fwCaenCrateSY1527Operation.pnl -> Switch crate fan speed() -> Error unknown fan speed value: \" + sCurrentSpeed);
      return;
      break;
      
  }//switch(Speed)
  
  if( iNewSpeed != 0 )
    dpSetWait(dsCRATEOBJECT[fwDevice_DP_NAME] + \".Commands.SetFanSpeed\", iNewSpeed);

}" 0
 E E E
2 133
"PRIMITIVE_TEXT2"
""
1 1452 723 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
130 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

4
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"selectable" ""
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 1452 723 1538 737
0 2 2 "0s" 0 0 0 65 0 0  1452 723 1
2
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 2
LANG:1 1 a
LANG:10001 1 a
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
3 0 "PANEL_REF_HELP" -1
"layoutAlignment" "AlignCenter"
"" ""
"objects/fwGeneral/fwHelpButton.pnl" 1520 80 T 0 1 0 1 -820 -70
1
"$sPanelRelativePath""fwCaen/fwCaenCrateSY1527Operation.pnl"
1 3 "SHAPE_GROUP_COMMAND_MASSIVE" -1
9 0 
10 11 98 99 100 101 102 103 104 

"layoutAlignment" "AlignCenter"
"" ""
1 5 "SHAPE_GROUP_INFO" -1
43 0 
20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 48 49 50 51 52 53 54 55 57 58 59 94 95 96 119 120 121 

"layoutAlignment" "AlignCenter"
"" ""
1 6 "SHAPE_GROUP_STATUS" -1
24 0 
61 62 64 65 66 67 68 69 70 72 74 76 78 79 80 81 82 83 85 86 91 92 116 117 

"layoutAlignment" "AlignCenter"
"" ""
1 7 "SHAPE_GROUP_COMMAND_ALARMS" -1
2 0 
108 125 

"layoutAlignment" "AlignCenter"
"" ""
1 8 "SHAPE_GROUP_COMMAND_CRATE" -1
6 0 
105 107 109 110 111 129 

"layoutAlignment" "AlignCenter"
"" ""
0
